{"ast":null,"code":"import _objectWithoutProperties from \"/Users/leandrodisconzi/CascadeProjects/geodome-website/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"color\", \"opacity\", \"transparent\", \"screenspace\", \"toneMapped\", \"polygonOffset\", \"polygonOffsetFactor\", \"renderOrder\", \"thickness\", \"angle\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useThree, extend, applyProps } from '@react-three/fiber';\nimport { toCreasedNormals } from 'three-stdlib';\nimport { version } from '../helpers/constants.js';\nconst OutlinesMaterial = /* @__PURE__ */shaderMaterial({\n  screenspace: false,\n  color: /* @__PURE__ */new THREE.Color('black'),\n  opacity: 1,\n  thickness: 0.05,\n  size: /* @__PURE__ */new THREE.Vector2()\n}, \"#include <common>\\n   #include <morphtarget_pars_vertex>\\n   #include <skinning_pars_vertex>\\n   uniform float thickness;\\n   uniform bool screenspace;\\n   uniform vec2 size;\\n   void main() {\\n     #if defined (USE_SKINNING)\\n\\t     #include <beginnormal_vertex>\\n       #include <morphnormal_vertex>\\n       #include <skinbase_vertex>\\n       #include <skinnormal_vertex>\\n       #include <defaultnormal_vertex>\\n     #endif\\n     #include <begin_vertex>\\n\\t   #include <morphtarget_vertex>\\n\\t   #include <skinning_vertex>\\n     #include <project_vertex>\\n     vec4 tNormal = vec4(normal, 0.0);\\n     vec4 tPosition = vec4(transformed, 1.0);\\n     #ifdef USE_INSTANCING\\n       tNormal = instanceMatrix * tNormal;\\n       tPosition = instanceMatrix * tPosition;\\n     #endif\\n     if (screenspace) {\\n       vec3 newPosition = tPosition.xyz + tNormal.xyz * thickness;\\n       gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0); \\n     } else {\\n       vec4 clipPosition = projectionMatrix * modelViewMatrix * tPosition;\\n       vec4 clipNormal = projectionMatrix * modelViewMatrix * tNormal;\\n       vec2 offset = normalize(clipNormal.xy) * thickness / size * clipPosition.w * 2.0;\\n       clipPosition.xy += offset;\\n       gl_Position = clipPosition;\\n     }\\n   }\", \"uniform vec3 color;\\n   uniform float opacity;\\n   void main(){\\n     gl_FragColor = vec4(color, opacity);\\n     #include <tonemapping_fragment>\\n     #include <\".concat(version >= 154 ? 'colorspace_fragment' : 'encodings_fragment', \">\\n   }\"));\nfunction Outlines(_ref) {\n  let {\n      color = 'black',\n      opacity = 1,\n      transparent = false,\n      screenspace = false,\n      toneMapped = true,\n      polygonOffset = false,\n      polygonOffsetFactor = 0,\n      renderOrder = 0,\n      thickness = 0.05,\n      angle = Math.PI\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  const ref = React.useRef();\n  const [material] = React.useState(() => new OutlinesMaterial({\n    side: THREE.BackSide\n  }));\n  const {\n    gl\n  } = useThree();\n  const contextSize = gl.getDrawingBufferSize(new THREE.Vector2());\n  React.useMemo(() => extend({\n    OutlinesMaterial\n  }), []);\n  const oldAngle = React.useRef(0);\n  const oldGeometry = React.useRef();\n  React.useLayoutEffect(() => {\n    const group = ref.current;\n    if (!group) return;\n    const parent = group.parent;\n    if (parent && parent.geometry) {\n      if (oldAngle.current !== angle || oldGeometry.current !== parent.geometry) {\n        var _group$children;\n        oldAngle.current = angle;\n        oldGeometry.current = parent.geometry;\n\n        // Remove old mesh\n        let mesh = (_group$children = group.children) == null ? void 0 : _group$children[0];\n        if (mesh) {\n          if (angle) mesh.geometry.dispose();\n          group.remove(mesh);\n        }\n        if (parent.skeleton) {\n          mesh = new THREE.SkinnedMesh();\n          mesh.material = material;\n          mesh.bind(parent.skeleton, parent.bindMatrix);\n          group.add(mesh);\n        } else if (parent.isInstancedMesh) {\n          mesh = new THREE.InstancedMesh(parent.geometry, material, parent.count);\n          mesh.instanceMatrix = parent.instanceMatrix;\n          group.add(mesh);\n        } else {\n          mesh = new THREE.Mesh();\n          mesh.material = material;\n          group.add(mesh);\n        }\n        mesh.geometry = angle ? toCreasedNormals(parent.geometry, angle) : parent.geometry;\n      }\n    }\n  });\n  React.useLayoutEffect(() => {\n    const group = ref.current;\n    if (!group) return;\n    const mesh = group.children[0];\n    if (mesh) {\n      mesh.renderOrder = renderOrder;\n      applyProps(mesh.material, {\n        transparent,\n        thickness,\n        color,\n        opacity,\n        size: contextSize,\n        screenspace,\n        toneMapped,\n        polygonOffset,\n        polygonOffsetFactor\n      });\n    }\n  });\n  React.useEffect(() => {\n    return () => {\n      // Dispose everything on unmount\n      const group = ref.current;\n      if (!group) return;\n      const mesh = group.children[0];\n      if (mesh) {\n        if (angle) mesh.geometry.dispose();\n        group.remove(mesh);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref\n  }, props));\n}\nexport { Outlines };","map":{"version":3,"names":["_extends","THREE","React","shaderMaterial","useThree","extend","applyProps","toCreasedNormals","version","OutlinesMaterial","screenspace","color","Color","opacity","thickness","size","Vector2","concat","Outlines","_ref","transparent","toneMapped","polygonOffset","polygonOffsetFactor","renderOrder","angle","Math","PI","props","_objectWithoutProperties","_excluded","ref","useRef","material","useState","side","BackSide","gl","contextSize","getDrawingBufferSize","useMemo","oldAngle","oldGeometry","useLayoutEffect","group","current","parent","geometry","_group$children","mesh","children","dispose","remove","skeleton","SkinnedMesh","bind","bindMatrix","add","isInstancedMesh","InstancedMesh","count","instanceMatrix","Mesh","useEffect","createElement"],"sources":["/Users/leandrodisconzi/CascadeProjects/geodome-website/node_modules/@react-three/drei/core/Outlines.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useThree, extend, applyProps } from '@react-three/fiber';\nimport { toCreasedNormals } from 'three-stdlib';\nimport { version } from '../helpers/constants.js';\n\nconst OutlinesMaterial = /* @__PURE__ */shaderMaterial({\n  screenspace: false,\n  color: /* @__PURE__ */new THREE.Color('black'),\n  opacity: 1,\n  thickness: 0.05,\n  size: /* @__PURE__ */new THREE.Vector2()\n}, `#include <common>\n   #include <morphtarget_pars_vertex>\n   #include <skinning_pars_vertex>\n   uniform float thickness;\n   uniform bool screenspace;\n   uniform vec2 size;\n   void main() {\n     #if defined (USE_SKINNING)\n\t     #include <beginnormal_vertex>\n       #include <morphnormal_vertex>\n       #include <skinbase_vertex>\n       #include <skinnormal_vertex>\n       #include <defaultnormal_vertex>\n     #endif\n     #include <begin_vertex>\n\t   #include <morphtarget_vertex>\n\t   #include <skinning_vertex>\n     #include <project_vertex>\n     vec4 tNormal = vec4(normal, 0.0);\n     vec4 tPosition = vec4(transformed, 1.0);\n     #ifdef USE_INSTANCING\n       tNormal = instanceMatrix * tNormal;\n       tPosition = instanceMatrix * tPosition;\n     #endif\n     if (screenspace) {\n       vec3 newPosition = tPosition.xyz + tNormal.xyz * thickness;\n       gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0); \n     } else {\n       vec4 clipPosition = projectionMatrix * modelViewMatrix * tPosition;\n       vec4 clipNormal = projectionMatrix * modelViewMatrix * tNormal;\n       vec2 offset = normalize(clipNormal.xy) * thickness / size * clipPosition.w * 2.0;\n       clipPosition.xy += offset;\n       gl_Position = clipPosition;\n     }\n   }`, `uniform vec3 color;\n   uniform float opacity;\n   void main(){\n     gl_FragColor = vec4(color, opacity);\n     #include <tonemapping_fragment>\n     #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n   }`);\nfunction Outlines({\n  color = 'black',\n  opacity = 1,\n  transparent = false,\n  screenspace = false,\n  toneMapped = true,\n  polygonOffset = false,\n  polygonOffsetFactor = 0,\n  renderOrder = 0,\n  thickness = 0.05,\n  angle = Math.PI,\n  ...props\n}) {\n  const ref = React.useRef();\n  const [material] = React.useState(() => new OutlinesMaterial({\n    side: THREE.BackSide\n  }));\n  const {\n    gl\n  } = useThree();\n  const contextSize = gl.getDrawingBufferSize(new THREE.Vector2());\n  React.useMemo(() => extend({\n    OutlinesMaterial\n  }), []);\n  const oldAngle = React.useRef(0);\n  const oldGeometry = React.useRef();\n  React.useLayoutEffect(() => {\n    const group = ref.current;\n    if (!group) return;\n    const parent = group.parent;\n    if (parent && parent.geometry) {\n      if (oldAngle.current !== angle || oldGeometry.current !== parent.geometry) {\n        var _group$children;\n        oldAngle.current = angle;\n        oldGeometry.current = parent.geometry;\n\n        // Remove old mesh\n        let mesh = (_group$children = group.children) == null ? void 0 : _group$children[0];\n        if (mesh) {\n          if (angle) mesh.geometry.dispose();\n          group.remove(mesh);\n        }\n        if (parent.skeleton) {\n          mesh = new THREE.SkinnedMesh();\n          mesh.material = material;\n          mesh.bind(parent.skeleton, parent.bindMatrix);\n          group.add(mesh);\n        } else if (parent.isInstancedMesh) {\n          mesh = new THREE.InstancedMesh(parent.geometry, material, parent.count);\n          mesh.instanceMatrix = parent.instanceMatrix;\n          group.add(mesh);\n        } else {\n          mesh = new THREE.Mesh();\n          mesh.material = material;\n          group.add(mesh);\n        }\n        mesh.geometry = angle ? toCreasedNormals(parent.geometry, angle) : parent.geometry;\n      }\n    }\n  });\n  React.useLayoutEffect(() => {\n    const group = ref.current;\n    if (!group) return;\n    const mesh = group.children[0];\n    if (mesh) {\n      mesh.renderOrder = renderOrder;\n      applyProps(mesh.material, {\n        transparent,\n        thickness,\n        color,\n        opacity,\n        size: contextSize,\n        screenspace,\n        toneMapped,\n        polygonOffset,\n        polygonOffsetFactor\n      });\n    }\n  });\n  React.useEffect(() => {\n    return () => {\n      // Dispose everything on unmount\n      const group = ref.current;\n      if (!group) return;\n      const mesh = group.children[0];\n      if (mesh) {\n        if (angle) mesh.geometry.dispose();\n        group.remove(mesh);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref\n  }, props));\n}\n\nexport { Outlines };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}