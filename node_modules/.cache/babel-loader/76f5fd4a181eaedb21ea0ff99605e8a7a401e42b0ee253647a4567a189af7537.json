{"ast":null,"code":"var _jsxFileName = \"/Users/leandrodisconzi/CascadeProjects/geodome-website/src/components/MorphingGeometry.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MorphingGeometry = () => {\n  _s();\n  const mountRef = useRef(null);\n  const frameRef = useRef(null);\n  useEffect(() => {\n    let particles = [];\n    const particleCount = 20000;\n    const domeRadius = 120;\n    const domeHeight = 70;\n    const frameThickness = 2;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    const width = mountRef.current.clientWidth;\n    const height = mountRef.current.clientHeight;\n    renderer.setSize(width, height);\n    mountRef.current.appendChild(renderer.domElement);\n    camera.position.set(0, 40, 300);\n    camera.lookAt(0, 0, 0);\n    const createFrames = () => {\n      const frameGeometry = new THREE.BufferGeometry();\n      const framePositions = [];\n      const frameColor = new THREE.Color(0xd35400);\n      const rings = [Math.PI / 6, Math.PI / 3, Math.PI / 2];\n      rings.forEach(phi => {\n        for (let theta = 0; theta < Math.PI * 2; theta += 0.1) {\n          const x1 = domeRadius * Math.sin(phi) * Math.cos(theta);\n          const y1 = domeHeight / 90 * domeRadius * Math.cos(phi);\n          const z1 = domeRadius * Math.sin(phi) * Math.sin(theta);\n          const x2 = domeRadius * Math.sin(phi) * Math.cos(theta + 0.1);\n          const y2 = domeHeight / 90 * domeRadius * Math.cos(phi);\n          const z2 = domeRadius * Math.sin(phi) * Math.sin(theta + 0.1);\n          framePositions.push(x1, y1, z1);\n          framePositions.push(x2, y2, z2);\n        }\n      });\n      const verticalCount = 10;\n      for (let i = 0; i < verticalCount; i++) {\n        const theta = i * Math.PI * 2 / verticalCount;\n        for (let phi = 0; phi < Math.PI / 2; phi += 0.1) {\n          const x1 = domeRadius * Math.sin(phi) * Math.cos(theta);\n          const y1 = domeHeight / 90 * domeRadius * Math.cos(phi);\n          const z1 = domeRadius * Math.sin(phi) * Math.sin(theta);\n          const x2 = domeRadius * Math.sin(phi + 0.1) * Math.cos(theta);\n          const y2 = domeHeight / 90 * domeRadius * Math.cos(phi + 0.1);\n          const z2 = domeRadius * Math.sin(phi + 0.1) * Math.sin(theta);\n          framePositions.push(x1, y1, z1);\n          framePositions.push(x2, y2, z2);\n        }\n      }\n      frameGeometry.setAttribute('position', new THREE.Float32BufferAttribute(framePositions, 3));\n      const frameMaterial = new THREE.LineBasicMaterial({\n        color: frameColor,\n        linewidth: 2,\n        transparent: true,\n        opacity: 0.8\n      });\n      const frameLines = new THREE.LineSegments(frameGeometry, frameMaterial);\n      scene.add(frameLines);\n      return frameLines;\n    };\n    const frames = createFrames();\n    const createParticles = () => {\n      const geometry = new THREE.BufferGeometry();\n      const positions = [];\n      const colors = [];\n      const frameColor = new THREE.Color(0xd35400);\n      const glassColor = new THREE.Color(0x95a5a6);\n      const isOnFrame = (theta, phi) => {\n        const rings = [Math.PI / 6, Math.PI / 3, Math.PI / 2];\n        for (let ring of rings) {\n          if (Math.abs(phi - ring) < frameThickness / domeRadius) return true;\n        }\n        const verticalCount = 10;\n        for (let i = 0; i < verticalCount; i++) {\n          const frameTheta = i * Math.PI * 2 / verticalCount;\n          if (Math.abs((theta + Math.PI * 2) % (Math.PI * 2) - frameTheta) < frameThickness / domeRadius) return true;\n        }\n        return false;\n      };\n      for (let i = 0; i < particleCount; i++) {\n        const theta = THREE.MathUtils.randFloat(0, Math.PI * 2);\n        const phi = THREE.MathUtils.randFloat(0, Math.PI / 2);\n        const radius = domeRadius + THREE.MathUtils.randFloat(-2, 2);\n        const x = radius * Math.sin(phi) * Math.cos(theta);\n        const y = domeHeight / 90 * radius * Math.cos(phi);\n        const z = radius * Math.sin(phi) * Math.sin(theta);\n        if (y < 5 && Math.sqrt(x * x + z * z) < domeRadius * 1.2) {\n          positions.push(x, 0, z);\n          colors.push(0.6, 0.3, 0.1);\n          particles.push({\n            position: new THREE.Vector3(x, 0, z),\n            originalPosition: new THREE.Vector3(x, 0, z),\n            velocity: new THREE.Vector3(0, 0, 0)\n          });\n          continue;\n        }\n        positions.push(x, y, z);\n        const isFrame = isOnFrame(theta, phi);\n        const color = isFrame ? frameColor : glassColor;\n        colors.push(color.r, color.g, color.b);\n        particles.push({\n          position: new THREE.Vector3(x, y, z),\n          originalPosition: new THREE.Vector3(x, y, z),\n          velocity: new THREE.Vector3(0, 0, 0)\n        });\n      }\n      geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n      geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n      const material = new THREE.PointsMaterial({\n        size: 0.6,\n        vertexColors: true,\n        transparent: true,\n        opacity: 0.9\n      });\n      const points = new THREE.Points(geometry, material);\n      scene.add(points);\n      return {\n        geometry,\n        points\n      };\n    };\n    const {\n      geometry,\n      points\n    } = createParticles();\n    const mouse = new THREE.Vector2();\n    const mouseRadius = 30;\n    const mouseStrength = 40;\n    const handleMouseMove = event => {\n      const rect = mountRef.current.getBoundingClientRect();\n      mouse.x = (event.clientX - rect.left) / width * 2 - 1;\n      mouse.y = -((event.clientY - rect.top) / height) * 2 + 1;\n      const vector = new THREE.Vector3(mouse.x, mouse.y, 0);\n      vector.unproject(camera);\n      const dir = vector.sub(camera.position).normalize();\n      const distance = -camera.position.z / dir.z;\n      const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n      particles.forEach((particle, i) => {\n        const distance = particle.position.distanceTo(pos);\n        if (distance < mouseRadius) {\n          const force = (mouseRadius - distance) / mouseRadius;\n          const repulsion = pos.clone().sub(particle.position).normalize().multiplyScalar(-force * mouseStrength);\n          particle.velocity.add(repulsion);\n        }\n      });\n    };\n    const animate = () => {\n      frameRef.current = requestAnimationFrame(animate);\n      particles.forEach((particle, i) => {\n        particle.position.add(particle.velocity);\n        const direction = particle.originalPosition.clone().sub(particle.position);\n        const distance = direction.length();\n        if (distance > 0.1) {\n          direction.normalize().multiplyScalar(0.2);\n          particle.velocity.add(direction);\n        }\n        particle.velocity.multiplyScalar(0.85);\n        geometry.attributes.position.array[i * 3] = particle.position.x;\n        geometry.attributes.position.array[i * 3 + 1] = particle.position.y;\n        geometry.attributes.position.array[i * 3 + 2] = particle.position.z;\n      });\n      geometry.attributes.position.needsUpdate = true;\n      points.rotation.y += 0.0003;\n      frames.rotation.y += 0.0003;\n      renderer.render(scene, camera);\n    };\n    animate();\n    window.addEventListener('resize', handleResize);\n    mountRef.current.addEventListener('mousemove', handleMouseMove);\n    function handleResize() {\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    }\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      mountRef.current.removeEventListener('mousemove', handleMouseMove);\n      cancelAnimationFrame(frameRef.current);\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100%',\n      height: '600px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 10\n  }, this);\n};\n_s(MorphingGeometry, \"uSvkYMZ4bAje1KX0sGbGkcI94U8=\");\n_c = MorphingGeometry;\nexport default MorphingGeometry;\nvar _c;\n$RefreshReg$(_c, \"MorphingGeometry\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","MorphingGeometry","_s","mountRef","frameRef","particles","particleCount","domeRadius","domeHeight","frameThickness","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","alpha","width","current","clientWidth","height","clientHeight","setSize","appendChild","domElement","position","set","lookAt","createFrames","frameGeometry","BufferGeometry","framePositions","frameColor","Color","rings","Math","PI","forEach","phi","theta","x1","sin","cos","y1","z1","x2","y2","z2","push","verticalCount","i","setAttribute","Float32BufferAttribute","frameMaterial","LineBasicMaterial","color","linewidth","transparent","opacity","frameLines","LineSegments","add","frames","createParticles","geometry","positions","colors","glassColor","isOnFrame","ring","abs","frameTheta","MathUtils","randFloat","radius","x","y","z","sqrt","Vector3","originalPosition","velocity","isFrame","r","g","b","material","PointsMaterial","size","vertexColors","points","Points","mouse","Vector2","mouseRadius","mouseStrength","handleMouseMove","event","rect","getBoundingClientRect","clientX","left","clientY","top","vector","unproject","dir","sub","normalize","distance","pos","clone","multiplyScalar","particle","distanceTo","force","repulsion","animate","requestAnimationFrame","direction","length","attributes","array","needsUpdate","rotation","render","addEventListener","handleResize","aspect","updateProjectionMatrix","removeEventListener","cancelAnimationFrame","removeChild","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/leandrodisconzi/CascadeProjects/geodome-website/src/components/MorphingGeometry.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nconst MorphingGeometry = () => {\n  const mountRef = useRef(null);\n  const frameRef = useRef(null);\n\n  useEffect(() => {\n    let particles = [];\n    const particleCount = 20000;\n    const domeRadius = 120;\n    const domeHeight = 70; \n    const frameThickness = 2;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    \n    const width = mountRef.current.clientWidth;\n    const height = mountRef.current.clientHeight;\n    renderer.setSize(width, height);\n    mountRef.current.appendChild(renderer.domElement);\n\n    camera.position.set(0, 40, 300);\n    camera.lookAt(0, 0, 0);\n\n    const createFrames = () => {\n      const frameGeometry = new THREE.BufferGeometry();\n      const framePositions = [];\n      const frameColor = new THREE.Color(0xd35400);\n\n      const rings = [Math.PI/6, Math.PI/3, Math.PI/2];\n      rings.forEach(phi => {\n        for (let theta = 0; theta < Math.PI * 2; theta += 0.1) {\n          const x1 = domeRadius * Math.sin(phi) * Math.cos(theta);\n          const y1 = (domeHeight/90) * domeRadius * Math.cos(phi);\n          const z1 = domeRadius * Math.sin(phi) * Math.sin(theta);\n\n          const x2 = domeRadius * Math.sin(phi) * Math.cos(theta + 0.1);\n          const y2 = (domeHeight/90) * domeRadius * Math.cos(phi);\n          const z2 = domeRadius * Math.sin(phi) * Math.sin(theta + 0.1);\n\n          framePositions.push(x1, y1, z1);\n          framePositions.push(x2, y2, z2);\n        }\n      });\n\n      const verticalCount = 10;\n      for (let i = 0; i < verticalCount; i++) {\n        const theta = (i * Math.PI * 2) / verticalCount;\n        for (let phi = 0; phi < Math.PI/2; phi += 0.1) {\n          const x1 = domeRadius * Math.sin(phi) * Math.cos(theta);\n          const y1 = (domeHeight/90) * domeRadius * Math.cos(phi);\n          const z1 = domeRadius * Math.sin(phi) * Math.sin(theta);\n\n          const x2 = domeRadius * Math.sin(phi + 0.1) * Math.cos(theta);\n          const y2 = (domeHeight/90) * domeRadius * Math.cos(phi + 0.1);\n          const z2 = domeRadius * Math.sin(phi + 0.1) * Math.sin(theta);\n\n          framePositions.push(x1, y1, z1);\n          framePositions.push(x2, y2, z2);\n        }\n      }\n\n      frameGeometry.setAttribute('position', new THREE.Float32BufferAttribute(framePositions, 3));\n      \n      const frameMaterial = new THREE.LineBasicMaterial({ \n        color: frameColor,\n        linewidth: 2,\n        transparent: true,\n        opacity: 0.8\n      });\n\n      const frameLines = new THREE.LineSegments(frameGeometry, frameMaterial);\n      scene.add(frameLines);\n\n      return frameLines;\n    };\n\n    const frames = createFrames();\n\n    const createParticles = () => {\n      const geometry = new THREE.BufferGeometry();\n      const positions = [];\n      const colors = [];\n\n      const frameColor = new THREE.Color(0xd35400);\n      const glassColor = new THREE.Color(0x95a5a6);\n\n      const isOnFrame = (theta, phi) => {\n        const rings = [Math.PI/6, Math.PI/3, Math.PI/2];\n        for (let ring of rings) {\n          if (Math.abs(phi - ring) < frameThickness/domeRadius) return true;\n        }\n\n        const verticalCount = 10;\n        for (let i = 0; i < verticalCount; i++) {\n          const frameTheta = (i * Math.PI * 2) / verticalCount;\n          if (Math.abs(((theta + Math.PI * 2) % (Math.PI * 2)) - frameTheta) < frameThickness/domeRadius) return true;\n        }\n\n        return false;\n      };\n\n      for (let i = 0; i < particleCount; i++) {\n        const theta = THREE.MathUtils.randFloat(0, Math.PI * 2);\n        const phi = THREE.MathUtils.randFloat(0, Math.PI / 2);\n        const radius = domeRadius + THREE.MathUtils.randFloat(-2, 2);\n\n        const x = radius * Math.sin(phi) * Math.cos(theta);\n        const y = (domeHeight/90) * radius * Math.cos(phi); \n        const z = radius * Math.sin(phi) * Math.sin(theta);\n\n        if (y < 5 && Math.sqrt(x*x + z*z) < domeRadius * 1.2) {\n          positions.push(x, 0, z);\n          colors.push(0.6, 0.3, 0.1);\n          particles.push({\n            position: new THREE.Vector3(x, 0, z),\n            originalPosition: new THREE.Vector3(x, 0, z),\n            velocity: new THREE.Vector3(0, 0, 0)\n          });\n          continue;\n        }\n\n        positions.push(x, y, z);\n\n        const isFrame = isOnFrame(theta, phi);\n        const color = isFrame ? frameColor : glassColor;\n        colors.push(color.r, color.g, color.b);\n\n        particles.push({\n          position: new THREE.Vector3(x, y, z),\n          originalPosition: new THREE.Vector3(x, y, z),\n          velocity: new THREE.Vector3(0, 0, 0)\n        });\n      }\n\n      geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n      geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n\n      const material = new THREE.PointsMaterial({\n        size: 0.6,\n        vertexColors: true,\n        transparent: true,\n        opacity: 0.9,\n      });\n\n      const points = new THREE.Points(geometry, material);\n      scene.add(points);\n\n      return { geometry, points };\n    };\n\n    const { geometry, points } = createParticles();\n\n    const mouse = new THREE.Vector2();\n    const mouseRadius = 30;\n    const mouseStrength = 40; \n\n    const handleMouseMove = (event) => {\n      const rect = mountRef.current.getBoundingClientRect();\n      mouse.x = ((event.clientX - rect.left) / width) * 2 - 1;\n      mouse.y = -((event.clientY - rect.top) / height) * 2 + 1;\n\n      const vector = new THREE.Vector3(mouse.x, mouse.y, 0);\n      vector.unproject(camera);\n      const dir = vector.sub(camera.position).normalize();\n      const distance = -camera.position.z / dir.z;\n      const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n\n      particles.forEach((particle, i) => {\n        const distance = particle.position.distanceTo(pos);\n        if (distance < mouseRadius) {\n          const force = (mouseRadius - distance) / mouseRadius;\n          const repulsion = pos.clone().sub(particle.position).normalize().multiplyScalar(-force * mouseStrength);\n          particle.velocity.add(repulsion);\n        }\n      });\n    };\n\n    const animate = () => {\n      frameRef.current = requestAnimationFrame(animate);\n\n      particles.forEach((particle, i) => {\n        particle.position.add(particle.velocity);\n\n        const direction = particle.originalPosition.clone().sub(particle.position);\n        const distance = direction.length();\n        if (distance > 0.1) {\n          direction.normalize().multiplyScalar(0.2); \n          particle.velocity.add(direction);\n        }\n\n        particle.velocity.multiplyScalar(0.85); \n\n        geometry.attributes.position.array[i * 3] = particle.position.x;\n        geometry.attributes.position.array[i * 3 + 1] = particle.position.y;\n        geometry.attributes.position.array[i * 3 + 2] = particle.position.z;\n      });\n\n      geometry.attributes.position.needsUpdate = true;\n      points.rotation.y += 0.0003;\n      frames.rotation.y += 0.0003;\n\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    window.addEventListener('resize', handleResize);\n    mountRef.current.addEventListener('mousemove', handleMouseMove);\n\n    function handleResize() {\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    }\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      mountRef.current.removeEventListener('mousemove', handleMouseMove);\n      cancelAnimationFrame(frameRef.current);\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return <div ref={mountRef} style={{ width: '100%', height: '600px' }} />;\n};\n\nexport default MorphingGeometry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}