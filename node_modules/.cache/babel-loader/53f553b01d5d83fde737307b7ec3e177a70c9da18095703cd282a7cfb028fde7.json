{"ast":null,"code":"var _jsxFileName = \"/Users/leandrodisconzi/CascadeProjects/geodome-website/src/components/MorphingGeometry.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MorphingGeometry = () => {\n  _s();\n  const mountRef = useRef(null);\n  const frameRef = useRef(null);\n  useEffect(() => {\n    let particles = [];\n    const particleCount = 15000;\n    const domeRadius = 100;\n    const frameThickness = 4;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    const width = mountRef.current.clientWidth;\n    const height = mountRef.current.clientHeight;\n    renderer.setSize(width, height);\n    mountRef.current.appendChild(renderer.domElement);\n    camera.position.set(0, 30, 250);\n    camera.lookAt(0, 0, 0);\n    const createParticles = () => {\n      const geometry = new THREE.BufferGeometry();\n      const positions = [];\n      const colors = [];\n      const frameColor = new THREE.Color(0xd35400);\n      const glassColor = new THREE.Color(0x95a5a6);\n      const isOnFrame = (theta, phi) => {\n        const rings = [Math.PI / 6, Math.PI / 3, Math.PI / 2];\n        for (let ring of rings) {\n          if (Math.abs(phi - ring) < frameThickness / domeRadius) return true;\n        }\n        const verticalCount = 10;\n        for (let i = 0; i < verticalCount; i++) {\n          const frameTheta = i * Math.PI * 2 / verticalCount;\n          if (Math.abs((theta + Math.PI * 2) % (Math.PI * 2) - frameTheta) < frameThickness / domeRadius) return true;\n        }\n        const diagonalCount = 10;\n        for (let i = 0; i < diagonalCount; i++) {\n          const frameLine = (theta - phi * 2) % (Math.PI * 2);\n          if (Math.abs(frameLine - i * Math.PI * 2 / diagonalCount) < frameThickness / domeRadius) return true;\n        }\n        return false;\n      };\n      for (let i = 0; i < particleCount; i++) {\n        const theta = THREE.MathUtils.randFloat(0, Math.PI * 2);\n        const phi = THREE.MathUtils.randFloat(0, Math.PI / 2);\n        const radius = domeRadius + THREE.MathUtils.randFloat(-2, 2);\n        const x = radius * Math.sin(phi) * Math.cos(theta);\n        const y = radius * Math.cos(phi);\n        const z = radius * Math.sin(phi) * Math.sin(theta);\n        if (y < 5 && Math.sqrt(x * x + z * z) < domeRadius * 1.2) {\n          positions.push(x, 0, z);\n          colors.push(0.6, 0.3, 0.1);\n          particles.push({\n            position: new THREE.Vector3(x, 0, z),\n            originalPosition: new THREE.Vector3(x, 0, z),\n            velocity: new THREE.Vector3(0, 0, 0)\n          });\n          continue;\n        }\n        positions.push(x, y, z);\n        const isFrame = isOnFrame(theta, phi);\n        const color = isFrame ? frameColor : glassColor;\n        colors.push(color.r, color.g, color.b);\n        particles.push({\n          position: new THREE.Vector3(x, y, z),\n          originalPosition: new THREE.Vector3(x, y, z),\n          velocity: new THREE.Vector3(THREE.MathUtils.randFloat(-0.02, 0.02), THREE.MathUtils.randFloat(-0.02, 0.02), THREE.MathUtils.randFloat(-0.02, 0.02))\n        });\n      }\n      geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n      geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n      const material = new THREE.PointsMaterial({\n        size: 0.5,\n        vertexColors: true,\n        transparent: true,\n        opacity: 0.9\n      });\n      const points = new THREE.Points(geometry, material);\n      scene.add(points);\n      return {\n        geometry,\n        points\n      };\n    };\n    const {\n      geometry,\n      points\n    } = createParticles();\n    const mouse = new THREE.Vector2();\n    const mouseRadius = 20;\n    const mouseStrength = 10;\n    const handleMouseMove = event => {\n      const rect = mountRef.current.getBoundingClientRect();\n      mouse.x = (event.clientX - rect.left) / width * 2 - 1;\n      mouse.y = -((event.clientY - rect.top) / height) * 2 + 1;\n      const vector = new THREE.Vector3(mouse.x, mouse.y, 0);\n      vector.unproject(camera);\n      const dir = vector.sub(camera.position).normalize();\n      const distance = -camera.position.z / dir.z;\n      const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n      particles.forEach((particle, i) => {\n        const distance = particle.position.distanceTo(pos);\n        if (distance < mouseRadius) {\n          const force = (mouseRadius - distance) / mouseRadius;\n          const repulsion = pos.clone().sub(particle.position).normalize().multiplyScalar(-force * mouseStrength);\n          particle.velocity.add(repulsion);\n        }\n      });\n    };\n    const animate = () => {\n      frameRef.current = requestAnimationFrame(animate);\n      particles.forEach((particle, i) => {\n        particle.position.add(particle.velocity);\n        const direction = particle.originalPosition.clone().sub(particle.position);\n        const distance = direction.length();\n        if (distance > 0.1) {\n          direction.normalize().multiplyScalar(0.1);\n          particle.velocity.add(direction);\n        }\n        particle.velocity.multiplyScalar(0.95);\n        geometry.attributes.position.array[i * 3] = particle.position.x;\n        geometry.attributes.position.array[i * 3 + 1] = particle.position.y;\n        geometry.attributes.position.array[i * 3 + 2] = particle.position.z;\n      });\n      geometry.attributes.position.needsUpdate = true;\n      points.rotation.y += 0.0005;\n      renderer.render(scene, camera);\n    };\n    animate();\n    window.addEventListener('resize', handleResize);\n    mountRef.current.addEventListener('mousemove', handleMouseMove);\n    function handleResize() {\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    }\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      mountRef.current.removeEventListener('mousemove', handleMouseMove);\n      cancelAnimationFrame(frameRef.current);\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100%',\n      height: '600px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 10\n  }, this);\n};\n_s(MorphingGeometry, \"uSvkYMZ4bAje1KX0sGbGkcI94U8=\");\n_c = MorphingGeometry;\nexport default MorphingGeometry;\nvar _c;\n$RefreshReg$(_c, \"MorphingGeometry\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","MorphingGeometry","_s","mountRef","frameRef","particles","particleCount","domeRadius","frameThickness","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","alpha","width","current","clientWidth","height","clientHeight","setSize","appendChild","domElement","position","set","lookAt","createParticles","geometry","BufferGeometry","positions","colors","frameColor","Color","glassColor","isOnFrame","theta","phi","rings","Math","PI","ring","abs","verticalCount","i","frameTheta","diagonalCount","frameLine","MathUtils","randFloat","radius","x","sin","cos","y","z","sqrt","push","Vector3","originalPosition","velocity","isFrame","color","r","g","b","setAttribute","Float32BufferAttribute","material","PointsMaterial","size","vertexColors","transparent","opacity","points","Points","add","mouse","Vector2","mouseRadius","mouseStrength","handleMouseMove","event","rect","getBoundingClientRect","clientX","left","clientY","top","vector","unproject","dir","sub","normalize","distance","pos","clone","multiplyScalar","forEach","particle","distanceTo","force","repulsion","animate","requestAnimationFrame","direction","length","attributes","array","needsUpdate","rotation","render","addEventListener","handleResize","aspect","updateProjectionMatrix","removeEventListener","cancelAnimationFrame","removeChild","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/leandrodisconzi/CascadeProjects/geodome-website/src/components/MorphingGeometry.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nconst MorphingGeometry = () => {\n  const mountRef = useRef(null);\n  const frameRef = useRef(null);\n\n  useEffect(() => {\n    let particles = [];\n    const particleCount = 15000; \n    const domeRadius = 100;\n    const frameThickness = 4;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    \n    const width = mountRef.current.clientWidth;\n    const height = mountRef.current.clientHeight;\n    renderer.setSize(width, height);\n    mountRef.current.appendChild(renderer.domElement);\n\n    camera.position.set(0, 30, 250);\n    camera.lookAt(0, 0, 0);\n\n    const createParticles = () => {\n      const geometry = new THREE.BufferGeometry();\n      const positions = [];\n      const colors = [];\n\n      const frameColor = new THREE.Color(0xd35400); \n      const glassColor = new THREE.Color(0x95a5a6); \n\n      const isOnFrame = (theta, phi) => {\n        const rings = [Math.PI/6, Math.PI/3, Math.PI/2];\n        for (let ring of rings) {\n          if (Math.abs(phi - ring) < frameThickness/domeRadius) return true;\n        }\n\n        const verticalCount = 10;\n        for (let i = 0; i < verticalCount; i++) {\n          const frameTheta = (i * Math.PI * 2) / verticalCount;\n          if (Math.abs(((theta + Math.PI * 2) % (Math.PI * 2)) - frameTheta) < frameThickness/domeRadius) return true;\n        }\n\n        const diagonalCount = 10;\n        for (let i = 0; i < diagonalCount; i++) {\n          const frameLine = (theta - phi * 2) % (Math.PI * 2);\n          if (Math.abs(frameLine - (i * Math.PI * 2 / diagonalCount)) < frameThickness/domeRadius) return true;\n        }\n\n        return false;\n      };\n\n      for (let i = 0; i < particleCount; i++) {\n        const theta = THREE.MathUtils.randFloat(0, Math.PI * 2);\n        const phi = THREE.MathUtils.randFloat(0, Math.PI / 2); \n        const radius = domeRadius + THREE.MathUtils.randFloat(-2, 2); \n\n        const x = radius * Math.sin(phi) * Math.cos(theta);\n        const y = radius * Math.cos(phi);\n        const z = radius * Math.sin(phi) * Math.sin(theta);\n\n        if (y < 5 && Math.sqrt(x*x + z*z) < domeRadius * 1.2) {\n          positions.push(x, 0, z);\n          colors.push(0.6, 0.3, 0.1); \n          particles.push({\n            position: new THREE.Vector3(x, 0, z),\n            originalPosition: new THREE.Vector3(x, 0, z),\n            velocity: new THREE.Vector3(0, 0, 0)\n          });\n          continue;\n        }\n\n        positions.push(x, y, z);\n\n        const isFrame = isOnFrame(theta, phi);\n        const color = isFrame ? frameColor : glassColor;\n        colors.push(color.r, color.g, color.b);\n\n        particles.push({\n          position: new THREE.Vector3(x, y, z),\n          originalPosition: new THREE.Vector3(x, y, z),\n          velocity: new THREE.Vector3(\n            THREE.MathUtils.randFloat(-0.02, 0.02),\n            THREE.MathUtils.randFloat(-0.02, 0.02),\n            THREE.MathUtils.randFloat(-0.02, 0.02)\n          )\n        });\n      }\n\n      geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n      geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n\n      const material = new THREE.PointsMaterial({\n        size: 0.5,\n        vertexColors: true,\n        transparent: true,\n        opacity: 0.9,\n      });\n\n      const points = new THREE.Points(geometry, material);\n      scene.add(points);\n\n      return { geometry, points };\n    };\n\n    const { geometry, points } = createParticles();\n\n    const mouse = new THREE.Vector2();\n    const mouseRadius = 20;\n    const mouseStrength = 10;\n\n    const handleMouseMove = (event) => {\n      const rect = mountRef.current.getBoundingClientRect();\n      mouse.x = ((event.clientX - rect.left) / width) * 2 - 1;\n      mouse.y = -((event.clientY - rect.top) / height) * 2 + 1;\n\n      const vector = new THREE.Vector3(mouse.x, mouse.y, 0);\n      vector.unproject(camera);\n      const dir = vector.sub(camera.position).normalize();\n      const distance = -camera.position.z / dir.z;\n      const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n\n      particles.forEach((particle, i) => {\n        const distance = particle.position.distanceTo(pos);\n        if (distance < mouseRadius) {\n          const force = (mouseRadius - distance) / mouseRadius;\n          const repulsion = pos.clone().sub(particle.position).normalize().multiplyScalar(-force * mouseStrength);\n          particle.velocity.add(repulsion);\n        }\n      });\n    };\n\n    const animate = () => {\n      frameRef.current = requestAnimationFrame(animate);\n\n      particles.forEach((particle, i) => {\n        particle.position.add(particle.velocity);\n\n        const direction = particle.originalPosition.clone().sub(particle.position);\n        const distance = direction.length();\n        if (distance > 0.1) {\n          direction.normalize().multiplyScalar(0.1);\n          particle.velocity.add(direction);\n        }\n\n        particle.velocity.multiplyScalar(0.95);\n\n        geometry.attributes.position.array[i * 3] = particle.position.x;\n        geometry.attributes.position.array[i * 3 + 1] = particle.position.y;\n        geometry.attributes.position.array[i * 3 + 2] = particle.position.z;\n      });\n\n      geometry.attributes.position.needsUpdate = true;\n      points.rotation.y += 0.0005; \n\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    window.addEventListener('resize', handleResize);\n    mountRef.current.addEventListener('mousemove', handleMouseMove);\n\n    function handleResize() {\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    }\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      mountRef.current.removeEventListener('mousemove', handleMouseMove);\n      cancelAnimationFrame(frameRef.current);\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return <div ref={mountRef} style={{ width: '100%', height: '600px' }} />;\n};\n\nexport default MorphingGeometry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}