{"ast":null,"code":"var _jsxFileName = \"/Users/leandrodisconzi/CascadeProjects/geodome-website/src/components/MorphingGeometry.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MorphingGeometry = () => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const mousePosition = useRef({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    sceneRef.current = {\n      scene,\n      camera,\n      renderer\n    };\n\n    // Size setup\n    const width = mountRef.current.clientWidth;\n    const height = mountRef.current.clientHeight;\n    renderer.setSize(width, height);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Camera position\n    camera.position.z = 5;\n\n    // Create geometry\n    const geometry = new THREE.IcosahedronGeometry(1, 1);\n    const material = new THREE.MeshPhongMaterial({\n      color: 0x4169e1,\n      wireframe: true,\n      wireframeLinewidth: 2,\n      transparent: true,\n      opacity: 0.8\n    });\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const pointLight = new THREE.PointLight(0xffffff, 1);\n    pointLight.position.set(5, 5, 5);\n    scene.add(pointLight);\n\n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.enableZoom = false;\n\n    // Mouse movement handler\n    const handleMouseMove = event => {\n      const rect = mountRef.current.getBoundingClientRect();\n      mousePosition.current = {\n        x: (event.clientX - rect.left) / width * 2 - 1,\n        y: -((event.clientY - rect.top) / height) * 2 + 1\n      };\n    };\n\n    // Window resize handler\n    const handleResize = () => {\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n\n    // Animation\n    let time = 0;\n    const animate = () => {\n      var _geometry$vertices;\n      requestAnimationFrame(animate);\n      time += 0.01;\n\n      // Morph geometry based on mouse position and time\n      (_geometry$vertices = geometry.vertices) === null || _geometry$vertices === void 0 ? void 0 : _geometry$vertices.forEach((vertex, i) => {\n        const initialPosition = new THREE.Vector3().copy(vertex);\n\n        // Add wave effect\n        vertex.x += Math.sin(time + i) * 0.01 * (mousePosition.current.x + 1);\n        vertex.y += Math.cos(time + i) * 0.01 * (mousePosition.current.y + 1);\n\n        // Gradually return to original position\n        vertex.lerp(initialPosition, 0.1);\n      });\n      geometry.verticesNeedUpdate = true;\n      mesh.rotation.x += 0.001;\n      mesh.rotation.y += 0.002;\n      controls.update();\n      renderer.render(scene, camera);\n    };\n\n    // Start animation\n    animate();\n\n    // Event listeners\n    window.addEventListener('resize', handleResize);\n    mountRef.current.addEventListener('mousemove', handleMouseMove);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      mountRef.current.removeEventListener('mousemove', handleMouseMove);\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100%',\n      height: '600px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 10\n  }, this);\n};\n_s(MorphingGeometry, \"+q7fRPVCtDZ7VeXY+FVmjHH7rko=\");\n_c = MorphingGeometry;\nexport default MorphingGeometry;\nvar _c;\n$RefreshReg$(_c, \"MorphingGeometry\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","jsxDEV","_jsxDEV","MorphingGeometry","_s","mountRef","sceneRef","mousePosition","x","y","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","alpha","current","width","clientWidth","height","clientHeight","setSize","appendChild","domElement","position","z","geometry","IcosahedronGeometry","material","MeshPhongMaterial","color","wireframe","wireframeLinewidth","transparent","opacity","mesh","Mesh","add","ambientLight","AmbientLight","pointLight","PointLight","set","controls","enableDamping","dampingFactor","enableZoom","handleMouseMove","event","rect","getBoundingClientRect","clientX","left","clientY","top","handleResize","aspect","updateProjectionMatrix","time","animate","_geometry$vertices","requestAnimationFrame","vertices","forEach","vertex","i","initialPosition","Vector3","copy","Math","sin","cos","lerp","verticesNeedUpdate","rotation","update","render","addEventListener","removeEventListener","removeChild","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/leandrodisconzi/CascadeProjects/geodome-website/src/components/MorphingGeometry.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nconst MorphingGeometry = () => {\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const mousePosition = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    \n    sceneRef.current = { scene, camera, renderer };\n    \n    // Size setup\n    const width = mountRef.current.clientWidth;\n    const height = mountRef.current.clientHeight;\n    renderer.setSize(width, height);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Camera position\n    camera.position.z = 5;\n\n    // Create geometry\n    const geometry = new THREE.IcosahedronGeometry(1, 1);\n    const material = new THREE.MeshPhongMaterial({\n      color: 0x4169e1,\n      wireframe: true,\n      wireframeLinewidth: 2,\n      transparent: true,\n      opacity: 0.8,\n    });\n    \n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    const pointLight = new THREE.PointLight(0xffffff, 1);\n    pointLight.position.set(5, 5, 5);\n    scene.add(pointLight);\n\n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.enableZoom = false;\n\n    // Mouse movement handler\n    const handleMouseMove = (event) => {\n      const rect = mountRef.current.getBoundingClientRect();\n      mousePosition.current = {\n        x: ((event.clientX - rect.left) / width) * 2 - 1,\n        y: -((event.clientY - rect.top) / height) * 2 + 1\n      };\n    };\n\n    // Window resize handler\n    const handleResize = () => {\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n\n    // Animation\n    let time = 0;\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      time += 0.01;\n\n      // Morph geometry based on mouse position and time\n      geometry.vertices?.forEach((vertex, i) => {\n        const initialPosition = new THREE.Vector3().copy(vertex);\n        \n        // Add wave effect\n        vertex.x += Math.sin(time + i) * 0.01 * (mousePosition.current.x + 1);\n        vertex.y += Math.cos(time + i) * 0.01 * (mousePosition.current.y + 1);\n        \n        // Gradually return to original position\n        vertex.lerp(initialPosition, 0.1);\n      });\n\n      geometry.verticesNeedUpdate = true;\n      mesh.rotation.x += 0.001;\n      mesh.rotation.y += 0.002;\n\n      controls.update();\n      renderer.render(scene, camera);\n    };\n\n    // Start animation\n    animate();\n\n    // Event listeners\n    window.addEventListener('resize', handleResize);\n    mountRef.current.addEventListener('mousemove', handleMouseMove);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      mountRef.current.removeEventListener('mousemove', handleMouseMove);\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return <div ref={mountRef} style={{ width: '100%', height: '600px' }} />;\n};\n\nexport default MorphingGeometry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}