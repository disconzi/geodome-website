{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Color } from 'three';\nimport { TextureInfo, TextureUsage } from './texture-info.js';\nimport { $correlatedObjects, $onUpdate, ThreeDOMElement } from './three-dom-element.js';\nconst $threeMaterial = Symbol('threeMaterial');\nconst $threeMaterials = Symbol('threeMaterials');\nconst $baseColorTexture = Symbol('baseColorTexture');\nconst $metallicRoughnessTexture = Symbol('metallicRoughnessTexture');\n/**\n * PBR material properties facade implementation for Three.js materials\n */\nexport class PBRMetallicRoughness extends ThreeDOMElement {\n  constructor(onUpdate, correlatedMaterials) {\n    super(onUpdate, correlatedMaterials);\n    const {\n      map,\n      metalnessMap\n    } = correlatedMaterials.values().next().value;\n    this[$baseColorTexture] = new TextureInfo(onUpdate, TextureUsage.Base, map, correlatedMaterials);\n    this[$metallicRoughnessTexture] = new TextureInfo(onUpdate, TextureUsage.MetallicRoughness, metalnessMap, correlatedMaterials);\n  }\n  get [$threeMaterials]() {\n    return this[$correlatedObjects];\n  }\n  get [$threeMaterial]() {\n    var _a;\n    return (_a = this[$correlatedObjects]) === null || _a === void 0 ? void 0 : _a.values().next().value;\n  }\n  get baseColorFactor() {\n    const rgba = [0, 0, 0, this[$threeMaterial].opacity];\n    this[$threeMaterial].color.toArray(rgba);\n    return rgba;\n  }\n  get metallicFactor() {\n    return this[$threeMaterial].metalness;\n  }\n  get roughnessFactor() {\n    return this[$threeMaterial].roughness;\n  }\n  get baseColorTexture() {\n    return this[$baseColorTexture];\n  }\n  get metallicRoughnessTexture() {\n    return this[$metallicRoughnessTexture];\n  }\n  setBaseColorFactor(rgba) {\n    const color = new Color();\n    if (rgba instanceof Array) {\n      color.fromArray(rgba);\n    } else {\n      color.set(rgba);\n    }\n    for (const material of this[$threeMaterials]) {\n      material.color.set(color);\n      if (rgba instanceof Array && rgba.length > 3) {\n        material.opacity = rgba[3];\n      } else {\n        rgba = [0, 0, 0, material.opacity];\n        color.toArray(rgba);\n      }\n    }\n    this[$onUpdate]();\n  }\n  setMetallicFactor(value) {\n    for (const material of this[$threeMaterials]) {\n      material.metalness = value;\n    }\n    this[$onUpdate]();\n  }\n  setRoughnessFactor(value) {\n    for (const material of this[$threeMaterials]) {\n      material.roughness = value;\n    }\n    this[$onUpdate]();\n  }\n}","map":{"version":3,"names":["Color","TextureInfo","TextureUsage","$correlatedObjects","$onUpdate","ThreeDOMElement","$threeMaterial","Symbol","$threeMaterials","$baseColorTexture","$metallicRoughnessTexture","PBRMetallicRoughness","constructor","onUpdate","correlatedMaterials","map","metalnessMap","values","next","value","Base","MetallicRoughness","_a","baseColorFactor","rgba","opacity","color","toArray","metallicFactor","metalness","roughnessFactor","roughness","baseColorTexture","metallicRoughnessTexture","setBaseColorFactor","Array","fromArray","set","material","length","setMetallicFactor","setRoughnessFactor"],"sources":["/Users/leandrodisconzi/CascadeProjects/geodome-website/node_modules/@google/model-viewer/lib/features/scene-graph/pbr-metallic-roughness.js"],"sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Color } from 'three';\nimport { TextureInfo, TextureUsage } from './texture-info.js';\nimport { $correlatedObjects, $onUpdate, ThreeDOMElement } from './three-dom-element.js';\nconst $threeMaterial = Symbol('threeMaterial');\nconst $threeMaterials = Symbol('threeMaterials');\nconst $baseColorTexture = Symbol('baseColorTexture');\nconst $metallicRoughnessTexture = Symbol('metallicRoughnessTexture');\n/**\n * PBR material properties facade implementation for Three.js materials\n */\nexport class PBRMetallicRoughness extends ThreeDOMElement {\n    constructor(onUpdate, correlatedMaterials) {\n        super(onUpdate, correlatedMaterials);\n        const { map, metalnessMap } = correlatedMaterials.values().next().value;\n        this[$baseColorTexture] =\n            new TextureInfo(onUpdate, TextureUsage.Base, map, correlatedMaterials);\n        this[$metallicRoughnessTexture] = new TextureInfo(onUpdate, TextureUsage.MetallicRoughness, metalnessMap, correlatedMaterials);\n    }\n    get [$threeMaterials]() {\n        return this[$correlatedObjects];\n    }\n    get [$threeMaterial]() {\n        var _a;\n        return (_a = this[$correlatedObjects]) === null || _a === void 0 ? void 0 : _a.values().next().value;\n    }\n    get baseColorFactor() {\n        const rgba = [0, 0, 0, this[$threeMaterial].opacity];\n        this[$threeMaterial].color.toArray(rgba);\n        return rgba;\n    }\n    get metallicFactor() {\n        return this[$threeMaterial].metalness;\n    }\n    get roughnessFactor() {\n        return this[$threeMaterial].roughness;\n    }\n    get baseColorTexture() {\n        return this[$baseColorTexture];\n    }\n    get metallicRoughnessTexture() {\n        return this[$metallicRoughnessTexture];\n    }\n    setBaseColorFactor(rgba) {\n        const color = new Color();\n        if (rgba instanceof Array) {\n            color.fromArray(rgba);\n        }\n        else {\n            color.set(rgba);\n        }\n        for (const material of this[$threeMaterials]) {\n            material.color.set(color);\n            if (rgba instanceof Array && rgba.length > 3) {\n                material.opacity = rgba[3];\n            }\n            else {\n                rgba = [0, 0, 0, material.opacity];\n                color.toArray(rgba);\n            }\n        }\n        this[$onUpdate]();\n    }\n    setMetallicFactor(value) {\n        for (const material of this[$threeMaterials]) {\n            material.metalness = value;\n        }\n        this[$onUpdate]();\n    }\n    setRoughnessFactor(value) {\n        for (const material of this[$threeMaterials]) {\n            material.roughness = value;\n        }\n        this[$onUpdate]();\n    }\n}\n//# sourceMappingURL=pbr-metallic-roughness.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}