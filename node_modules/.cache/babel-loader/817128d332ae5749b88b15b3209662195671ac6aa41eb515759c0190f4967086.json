{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b, _c;\nimport { LinearSRGBColorSpace, SRGBColorSpace, Vector2 } from 'three';\nimport { $threeTexture } from './image.js';\nimport { Texture } from './texture.js';\nconst $texture = Symbol('texture');\nconst $transform = Symbol('transform');\nexport const $materials = Symbol('materials');\nexport const $usage = Symbol('usage');\nconst $onUpdate = Symbol('onUpdate');\nconst $activeVideo = Symbol('activeVideo');\n// Defines what a texture will be used for.\nexport var TextureUsage;\n(function (TextureUsage) {\n  TextureUsage[TextureUsage[\"Base\"] = 0] = \"Base\";\n  TextureUsage[TextureUsage[\"MetallicRoughness\"] = 1] = \"MetallicRoughness\";\n  TextureUsage[TextureUsage[\"Normal\"] = 2] = \"Normal\";\n  TextureUsage[TextureUsage[\"Occlusion\"] = 3] = \"Occlusion\";\n  TextureUsage[TextureUsage[\"Emissive\"] = 4] = \"Emissive\";\n  TextureUsage[TextureUsage[\"Clearcoat\"] = 5] = \"Clearcoat\";\n  TextureUsage[TextureUsage[\"ClearcoatRoughness\"] = 6] = \"ClearcoatRoughness\";\n  TextureUsage[TextureUsage[\"ClearcoatNormal\"] = 7] = \"ClearcoatNormal\";\n  TextureUsage[TextureUsage[\"SheenColor\"] = 8] = \"SheenColor\";\n  TextureUsage[TextureUsage[\"SheenRoughness\"] = 9] = \"SheenRoughness\";\n  TextureUsage[TextureUsage[\"Transmission\"] = 10] = \"Transmission\";\n  TextureUsage[TextureUsage[\"Thickness\"] = 11] = \"Thickness\";\n  TextureUsage[TextureUsage[\"Specular\"] = 12] = \"Specular\";\n  TextureUsage[TextureUsage[\"SpecularColor\"] = 13] = \"SpecularColor\";\n  TextureUsage[TextureUsage[\"Iridescence\"] = 14] = \"Iridescence\";\n  TextureUsage[TextureUsage[\"IridescenceThickness\"] = 15] = \"IridescenceThickness\";\n  TextureUsage[TextureUsage[\"Anisotropy\"] = 16] = \"Anisotropy\";\n})(TextureUsage || (TextureUsage = {}));\n/**\n * TextureInfo facade implementation for Three.js materials\n */\nexport class TextureInfo {\n  constructor(onUpdate, usage, threeTexture, material) {\n    this[_a] = null;\n    this[_b] = {\n      rotation: 0,\n      scale: new Vector2(1, 1),\n      offset: new Vector2(0, 0)\n    };\n    this[_c] = false;\n    // Creates image, sampler, and texture if valid texture info is provided.\n    if (threeTexture) {\n      this[$transform].rotation = threeTexture.rotation;\n      this[$transform].scale.copy(threeTexture.repeat);\n      this[$transform].offset.copy(threeTexture.offset);\n      this[$texture] = new Texture(onUpdate, threeTexture);\n    }\n    this[$onUpdate] = onUpdate;\n    this[$materials] = material;\n    this[$usage] = usage;\n  }\n  get texture() {\n    return this[$texture];\n  }\n  setTexture(texture) {\n    var _d, _e;\n    const threeTexture = texture != null ? texture.source[$threeTexture] : null;\n    const oldTexture = (_d = this[$texture]) === null || _d === void 0 ? void 0 : _d.source[$threeTexture];\n    if (oldTexture != null && oldTexture.isVideoTexture) {\n      this[$activeVideo] = false;\n    } else if ((_e = this[$texture]) === null || _e === void 0 ? void 0 : _e.source.animation) {\n      this[$texture].source.animation.removeEventListener('enterFrame', this[$onUpdate]);\n    }\n    this[$texture] = texture;\n    if (threeTexture != null && threeTexture.isVideoTexture) {\n      const element = threeTexture.image;\n      this[$activeVideo] = true;\n      if (element.requestVideoFrameCallback != null) {\n        const update = () => {\n          if (!this[$activeVideo]) {\n            return;\n          }\n          this[$onUpdate]();\n          element.requestVideoFrameCallback(update);\n        };\n        element.requestVideoFrameCallback(update);\n      } else {\n        const update = () => {\n          if (!this[$activeVideo]) {\n            return;\n          }\n          this[$onUpdate]();\n          requestAnimationFrame(update);\n        };\n        requestAnimationFrame(update);\n      }\n    } else if ((texture === null || texture === void 0 ? void 0 : texture.source.animation) != null) {\n      texture.source.animation.addEventListener('enterFrame', this[$onUpdate]);\n    }\n    let colorSpace = SRGBColorSpace;\n    if (this[$materials]) {\n      for (const material of this[$materials]) {\n        switch (this[$usage]) {\n          case TextureUsage.Base:\n            material.map = threeTexture;\n            break;\n          case TextureUsage.MetallicRoughness:\n            colorSpace = LinearSRGBColorSpace;\n            material.metalnessMap = threeTexture;\n            material.roughnessMap = threeTexture;\n            break;\n          case TextureUsage.Normal:\n            colorSpace = LinearSRGBColorSpace;\n            material.normalMap = threeTexture;\n            break;\n          case TextureUsage.Occlusion:\n            colorSpace = LinearSRGBColorSpace;\n            material.aoMap = threeTexture;\n            break;\n          case TextureUsage.Emissive:\n            material.emissiveMap = threeTexture;\n            break;\n          case TextureUsage.Clearcoat:\n            material.clearcoatMap = threeTexture;\n            break;\n          case TextureUsage.ClearcoatRoughness:\n            material.clearcoatRoughnessMap = threeTexture;\n            break;\n          case TextureUsage.ClearcoatNormal:\n            material.clearcoatNormalMap = threeTexture;\n            break;\n          case TextureUsage.SheenColor:\n            material.sheenColorMap = threeTexture;\n            break;\n          case TextureUsage.SheenRoughness:\n            material.sheenRoughnessMap = threeTexture;\n            break;\n          case TextureUsage.Transmission:\n            material.transmissionMap = threeTexture;\n            break;\n          case TextureUsage.Thickness:\n            material.thicknessMap = threeTexture;\n            break;\n          case TextureUsage.Specular:\n            material.specularIntensityMap = threeTexture;\n            break;\n          case TextureUsage.SpecularColor:\n            material.specularColorMap = threeTexture;\n            break;\n          case TextureUsage.Iridescence:\n            material.iridescenceMap = threeTexture;\n            break;\n          case TextureUsage.IridescenceThickness:\n            material.iridescenceThicknessMap = threeTexture;\n            break;\n          case TextureUsage.Anisotropy:\n            material.anisotropyMap = threeTexture;\n            break;\n          default:\n        }\n        material.needsUpdate = true;\n      }\n    }\n    if (threeTexture) {\n      // Updates the colorSpace for the texture, affects all references.\n      threeTexture.colorSpace = colorSpace;\n      threeTexture.rotation = this[$transform].rotation;\n      threeTexture.repeat = this[$transform].scale;\n      threeTexture.offset = this[$transform].offset;\n    }\n    this[$onUpdate]();\n  }\n}\n_a = $texture, _b = $transform, _c = $activeVideo;","map":{"version":3,"names":["_a","_b","_c","LinearSRGBColorSpace","SRGBColorSpace","Vector2","$threeTexture","Texture","$texture","Symbol","$transform","$materials","$usage","$onUpdate","$activeVideo","TextureUsage","TextureInfo","constructor","onUpdate","usage","threeTexture","material","rotation","scale","offset","copy","repeat","texture","setTexture","_d","_e","source","oldTexture","isVideoTexture","animation","removeEventListener","element","image","requestVideoFrameCallback","update","requestAnimationFrame","addEventListener","colorSpace","Base","map","MetallicRoughness","metalnessMap","roughnessMap","Normal","normalMap","Occlusion","aoMap","Emissive","emissiveMap","Clearcoat","clearcoatMap","ClearcoatRoughness","clearcoatRoughnessMap","ClearcoatNormal","clearcoatNormalMap","SheenColor","sheenColorMap","SheenRoughness","sheenRoughnessMap","Transmission","transmissionMap","Thickness","thicknessMap","Specular","specularIntensityMap","SpecularColor","specularColorMap","Iridescence","iridescenceMap","IridescenceThickness","iridescenceThicknessMap","Anisotropy","anisotropyMap","needsUpdate"],"sources":["/Users/leandrodisconzi/CascadeProjects/geodome-website/node_modules/@google/model-viewer/lib/features/scene-graph/texture-info.js"],"sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b, _c;\nimport { LinearSRGBColorSpace, SRGBColorSpace, Vector2 } from 'three';\nimport { $threeTexture } from './image.js';\nimport { Texture } from './texture.js';\nconst $texture = Symbol('texture');\nconst $transform = Symbol('transform');\nexport const $materials = Symbol('materials');\nexport const $usage = Symbol('usage');\nconst $onUpdate = Symbol('onUpdate');\nconst $activeVideo = Symbol('activeVideo');\n// Defines what a texture will be used for.\nexport var TextureUsage;\n(function (TextureUsage) {\n    TextureUsage[TextureUsage[\"Base\"] = 0] = \"Base\";\n    TextureUsage[TextureUsage[\"MetallicRoughness\"] = 1] = \"MetallicRoughness\";\n    TextureUsage[TextureUsage[\"Normal\"] = 2] = \"Normal\";\n    TextureUsage[TextureUsage[\"Occlusion\"] = 3] = \"Occlusion\";\n    TextureUsage[TextureUsage[\"Emissive\"] = 4] = \"Emissive\";\n    TextureUsage[TextureUsage[\"Clearcoat\"] = 5] = \"Clearcoat\";\n    TextureUsage[TextureUsage[\"ClearcoatRoughness\"] = 6] = \"ClearcoatRoughness\";\n    TextureUsage[TextureUsage[\"ClearcoatNormal\"] = 7] = \"ClearcoatNormal\";\n    TextureUsage[TextureUsage[\"SheenColor\"] = 8] = \"SheenColor\";\n    TextureUsage[TextureUsage[\"SheenRoughness\"] = 9] = \"SheenRoughness\";\n    TextureUsage[TextureUsage[\"Transmission\"] = 10] = \"Transmission\";\n    TextureUsage[TextureUsage[\"Thickness\"] = 11] = \"Thickness\";\n    TextureUsage[TextureUsage[\"Specular\"] = 12] = \"Specular\";\n    TextureUsage[TextureUsage[\"SpecularColor\"] = 13] = \"SpecularColor\";\n    TextureUsage[TextureUsage[\"Iridescence\"] = 14] = \"Iridescence\";\n    TextureUsage[TextureUsage[\"IridescenceThickness\"] = 15] = \"IridescenceThickness\";\n    TextureUsage[TextureUsage[\"Anisotropy\"] = 16] = \"Anisotropy\";\n})(TextureUsage || (TextureUsage = {}));\n/**\n * TextureInfo facade implementation for Three.js materials\n */\nexport class TextureInfo {\n    constructor(onUpdate, usage, threeTexture, material) {\n        this[_a] = null;\n        this[_b] = {\n            rotation: 0,\n            scale: new Vector2(1, 1),\n            offset: new Vector2(0, 0)\n        };\n        this[_c] = false;\n        // Creates image, sampler, and texture if valid texture info is provided.\n        if (threeTexture) {\n            this[$transform].rotation = threeTexture.rotation;\n            this[$transform].scale.copy(threeTexture.repeat);\n            this[$transform].offset.copy(threeTexture.offset);\n            this[$texture] = new Texture(onUpdate, threeTexture);\n        }\n        this[$onUpdate] = onUpdate;\n        this[$materials] = material;\n        this[$usage] = usage;\n    }\n    get texture() {\n        return this[$texture];\n    }\n    setTexture(texture) {\n        var _d, _e;\n        const threeTexture = texture != null ? texture.source[$threeTexture] : null;\n        const oldTexture = (_d = this[$texture]) === null || _d === void 0 ? void 0 : _d.source[$threeTexture];\n        if (oldTexture != null && oldTexture.isVideoTexture) {\n            this[$activeVideo] = false;\n        }\n        else if ((_e = this[$texture]) === null || _e === void 0 ? void 0 : _e.source.animation) {\n            this[$texture].source.animation.removeEventListener('enterFrame', this[$onUpdate]);\n        }\n        this[$texture] = texture;\n        if (threeTexture != null && threeTexture.isVideoTexture) {\n            const element = threeTexture.image;\n            this[$activeVideo] = true;\n            if (element.requestVideoFrameCallback != null) {\n                const update = () => {\n                    if (!this[$activeVideo]) {\n                        return;\n                    }\n                    this[$onUpdate]();\n                    element.requestVideoFrameCallback(update);\n                };\n                element.requestVideoFrameCallback(update);\n            }\n            else {\n                const update = () => {\n                    if (!this[$activeVideo]) {\n                        return;\n                    }\n                    this[$onUpdate]();\n                    requestAnimationFrame(update);\n                };\n                requestAnimationFrame(update);\n            }\n        }\n        else if ((texture === null || texture === void 0 ? void 0 : texture.source.animation) != null) {\n            texture.source.animation.addEventListener('enterFrame', this[$onUpdate]);\n        }\n        let colorSpace = SRGBColorSpace;\n        if (this[$materials]) {\n            for (const material of this[$materials]) {\n                switch (this[$usage]) {\n                    case TextureUsage.Base:\n                        material.map = threeTexture;\n                        break;\n                    case TextureUsage.MetallicRoughness:\n                        colorSpace = LinearSRGBColorSpace;\n                        material.metalnessMap = threeTexture;\n                        material.roughnessMap = threeTexture;\n                        break;\n                    case TextureUsage.Normal:\n                        colorSpace = LinearSRGBColorSpace;\n                        material.normalMap = threeTexture;\n                        break;\n                    case TextureUsage.Occlusion:\n                        colorSpace = LinearSRGBColorSpace;\n                        material.aoMap = threeTexture;\n                        break;\n                    case TextureUsage.Emissive:\n                        material.emissiveMap = threeTexture;\n                        break;\n                    case TextureUsage.Clearcoat:\n                        material.clearcoatMap = threeTexture;\n                        break;\n                    case TextureUsage.ClearcoatRoughness:\n                        material.clearcoatRoughnessMap = threeTexture;\n                        break;\n                    case TextureUsage.ClearcoatNormal:\n                        material.clearcoatNormalMap = threeTexture;\n                        break;\n                    case TextureUsage.SheenColor:\n                        material.sheenColorMap = threeTexture;\n                        break;\n                    case TextureUsage.SheenRoughness:\n                        material.sheenRoughnessMap = threeTexture;\n                        break;\n                    case TextureUsage.Transmission:\n                        material.transmissionMap = threeTexture;\n                        break;\n                    case TextureUsage.Thickness:\n                        material.thicknessMap = threeTexture;\n                        break;\n                    case TextureUsage.Specular:\n                        material.specularIntensityMap = threeTexture;\n                        break;\n                    case TextureUsage.SpecularColor:\n                        material.specularColorMap = threeTexture;\n                        break;\n                    case TextureUsage.Iridescence:\n                        material.iridescenceMap = threeTexture;\n                        break;\n                    case TextureUsage.IridescenceThickness:\n                        material.iridescenceThicknessMap = threeTexture;\n                        break;\n                    case TextureUsage.Anisotropy:\n                        material.anisotropyMap = threeTexture;\n                        break;\n                    default:\n                }\n                material.needsUpdate = true;\n            }\n        }\n        if (threeTexture) {\n            // Updates the colorSpace for the texture, affects all references.\n            threeTexture.colorSpace = colorSpace;\n            threeTexture.rotation = this[$transform].rotation;\n            threeTexture.repeat = this[$transform].scale;\n            threeTexture.offset = this[$transform].offset;\n        }\n        this[$onUpdate]();\n    }\n}\n_a = $texture, _b = $transform, _c = $activeVideo;\n//# sourceMappingURL=texture-info.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}