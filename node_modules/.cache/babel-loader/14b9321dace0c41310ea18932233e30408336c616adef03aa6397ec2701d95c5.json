{"ast":null,"code":"var _jsxFileName = \"/Users/leandrodisconzi/CascadeProjects/geodome-website/src/components/MorphingGeometry.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MorphingGeometry = () => {\n  _s();\n  const mountRef = useRef(null);\n  const frameRef = useRef(null);\n  useEffect(() => {\n    let particles = [];\n    const particleCount = 700;\n    const maxDistance = 100;\n    const minDistance = 50;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n\n    // Size setup\n    const width = mountRef.current.clientWidth;\n    const height = mountRef.current.clientHeight;\n    renderer.setSize(width, height);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Camera position\n    camera.position.z = 200;\n\n    // Create particles in a dome shape\n    const createParticles = () => {\n      const geometry = new THREE.BufferGeometry();\n      const positions = [];\n      const colors = [];\n      const color1 = new THREE.Color(0x4169e1); // Blue\n      const color2 = new THREE.Color(0x87CEEB); // Light blue\n\n      for (let i = 0; i < particleCount; i++) {\n        // Create points in a dome shape\n        const theta = THREE.MathUtils.randFloat(0, Math.PI * 2);\n        const phi = THREE.MathUtils.randFloat(0, Math.PI / 2); // Only half sphere\n        const radius = THREE.MathUtils.randFloat(80, 100);\n        const x = radius * Math.sin(phi) * Math.cos(theta);\n        const y = radius * Math.sin(phi) * Math.sin(theta);\n        const z = radius * Math.cos(phi);\n        positions.push(x, y, z);\n\n        // Interpolate between colors based on height\n        const color = color1.clone().lerp(color2, z / radius);\n        colors.push(color.r, color.g, color.b);\n        particles.push({\n          position: new THREE.Vector3(x, y, z),\n          originalPosition: new THREE.Vector3(x, y, z),\n          velocity: new THREE.Vector3(THREE.MathUtils.randFloat(-0.05, 0.05), THREE.MathUtils.randFloat(-0.05, 0.05), THREE.MathUtils.randFloat(-0.05, 0.05))\n        });\n      }\n      geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n      geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n      const material = new THREE.PointsMaterial({\n        size: 0.8,\n        vertexColors: true,\n        transparent: true,\n        opacity: 0.8\n      });\n      const points = new THREE.Points(geometry, material);\n      scene.add(points);\n      return {\n        geometry,\n        points\n      };\n    };\n    const {\n      geometry,\n      points\n    } = createParticles();\n\n    // Mouse interaction\n    const mouse = new THREE.Vector2();\n    const mouseRadius = 30;\n    const mouseStrength = 20;\n    const handleMouseMove = event => {\n      const rect = mountRef.current.getBoundingClientRect();\n      mouse.x = (event.clientX - rect.left) / width * 2 - 1;\n      mouse.y = -((event.clientY - rect.top) / height) * 2 + 1;\n      const vector = new THREE.Vector3(mouse.x, mouse.y, 0);\n      vector.unproject(camera);\n      const dir = vector.sub(camera.position).normalize();\n      const distance = -camera.position.z / dir.z;\n      const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n      particles.forEach((particle, i) => {\n        const distance = particle.position.distanceTo(pos);\n        if (distance < mouseRadius) {\n          const force = (mouseRadius - distance) / mouseRadius;\n          const repulsion = pos.clone().sub(particle.position).normalize().multiplyScalar(-force * mouseStrength);\n          particle.velocity.add(repulsion);\n        }\n      });\n    };\n\n    // Animation\n    const animate = () => {\n      frameRef.current = requestAnimationFrame(animate);\n      particles.forEach((particle, i) => {\n        // Apply velocity\n        particle.position.add(particle.velocity);\n\n        // Return to original position\n        const direction = particle.originalPosition.clone().sub(particle.position);\n        const distance = direction.length();\n        if (distance > 0.1) {\n          direction.normalize().multiplyScalar(0.1);\n          particle.velocity.add(direction);\n        }\n\n        // Damping\n        particle.velocity.multiplyScalar(0.95);\n\n        // Update geometry\n        geometry.attributes.position.array[i * 3] = particle.position.x;\n        geometry.attributes.position.array[i * 3 + 1] = particle.position.y;\n        geometry.attributes.position.array[i * 3 + 2] = particle.position.z;\n      });\n      geometry.attributes.position.needsUpdate = true;\n      points.rotation.y += 0.001;\n      renderer.render(scene, camera);\n    };\n\n    // Start animation\n    animate();\n\n    // Event listeners\n    window.addEventListener('resize', handleResize);\n    mountRef.current.addEventListener('mousemove', handleMouseMove);\n\n    // Handle window resize\n    function handleResize() {\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    }\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      mountRef.current.removeEventListener('mousemove', handleMouseMove);\n      cancelAnimationFrame(frameRef.current);\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100%',\n      height: '600px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 10\n  }, this);\n};\n_s(MorphingGeometry, \"uSvkYMZ4bAje1KX0sGbGkcI94U8=\");\n_c = MorphingGeometry;\nexport default MorphingGeometry;\nvar _c;\n$RefreshReg$(_c, \"MorphingGeometry\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","MorphingGeometry","_s","mountRef","frameRef","particles","particleCount","maxDistance","minDistance","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","alpha","width","current","clientWidth","height","clientHeight","setSize","appendChild","domElement","position","z","createParticles","geometry","BufferGeometry","positions","colors","color1","Color","color2","i","theta","MathUtils","randFloat","Math","PI","phi","radius","x","sin","cos","y","push","color","clone","lerp","r","g","b","Vector3","originalPosition","velocity","setAttribute","Float32BufferAttribute","material","PointsMaterial","size","vertexColors","transparent","opacity","points","Points","add","mouse","Vector2","mouseRadius","mouseStrength","handleMouseMove","event","rect","getBoundingClientRect","clientX","left","clientY","top","vector","unproject","dir","sub","normalize","distance","pos","multiplyScalar","forEach","particle","distanceTo","force","repulsion","animate","requestAnimationFrame","direction","length","attributes","array","needsUpdate","rotation","render","addEventListener","handleResize","aspect","updateProjectionMatrix","removeEventListener","cancelAnimationFrame","removeChild","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/leandrodisconzi/CascadeProjects/geodome-website/src/components/MorphingGeometry.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nconst MorphingGeometry = () => {\n  const mountRef = useRef(null);\n  const frameRef = useRef(null);\n\n  useEffect(() => {\n    let particles = [];\n    const particleCount = 700;\n    const maxDistance = 100;\n    const minDistance = 50;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    \n    // Size setup\n    const width = mountRef.current.clientWidth;\n    const height = mountRef.current.clientHeight;\n    renderer.setSize(width, height);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Camera position\n    camera.position.z = 200;\n\n    // Create particles in a dome shape\n    const createParticles = () => {\n      const geometry = new THREE.BufferGeometry();\n      const positions = [];\n      const colors = [];\n\n      const color1 = new THREE.Color(0x4169e1); // Blue\n      const color2 = new THREE.Color(0x87CEEB); // Light blue\n\n      for (let i = 0; i < particleCount; i++) {\n        // Create points in a dome shape\n        const theta = THREE.MathUtils.randFloat(0, Math.PI * 2);\n        const phi = THREE.MathUtils.randFloat(0, Math.PI / 2); // Only half sphere\n        const radius = THREE.MathUtils.randFloat(80, 100);\n\n        const x = radius * Math.sin(phi) * Math.cos(theta);\n        const y = radius * Math.sin(phi) * Math.sin(theta);\n        const z = radius * Math.cos(phi);\n\n        positions.push(x, y, z);\n\n        // Interpolate between colors based on height\n        const color = color1.clone().lerp(color2, z / radius);\n        colors.push(color.r, color.g, color.b);\n\n        particles.push({\n          position: new THREE.Vector3(x, y, z),\n          originalPosition: new THREE.Vector3(x, y, z),\n          velocity: new THREE.Vector3(\n            THREE.MathUtils.randFloat(-0.05, 0.05),\n            THREE.MathUtils.randFloat(-0.05, 0.05),\n            THREE.MathUtils.randFloat(-0.05, 0.05)\n          )\n        });\n      }\n\n      geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n      geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n\n      const material = new THREE.PointsMaterial({\n        size: 0.8,\n        vertexColors: true,\n        transparent: true,\n        opacity: 0.8,\n      });\n\n      const points = new THREE.Points(geometry, material);\n      scene.add(points);\n\n      return { geometry, points };\n    };\n\n    const { geometry, points } = createParticles();\n\n    // Mouse interaction\n    const mouse = new THREE.Vector2();\n    const mouseRadius = 30;\n    const mouseStrength = 20;\n\n    const handleMouseMove = (event) => {\n      const rect = mountRef.current.getBoundingClientRect();\n      mouse.x = ((event.clientX - rect.left) / width) * 2 - 1;\n      mouse.y = -((event.clientY - rect.top) / height) * 2 + 1;\n\n      const vector = new THREE.Vector3(mouse.x, mouse.y, 0);\n      vector.unproject(camera);\n      const dir = vector.sub(camera.position).normalize();\n      const distance = -camera.position.z / dir.z;\n      const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n\n      particles.forEach((particle, i) => {\n        const distance = particle.position.distanceTo(pos);\n        if (distance < mouseRadius) {\n          const force = (mouseRadius - distance) / mouseRadius;\n          const repulsion = pos.clone().sub(particle.position).normalize().multiplyScalar(-force * mouseStrength);\n          particle.velocity.add(repulsion);\n        }\n      });\n    };\n\n    // Animation\n    const animate = () => {\n      frameRef.current = requestAnimationFrame(animate);\n\n      particles.forEach((particle, i) => {\n        // Apply velocity\n        particle.position.add(particle.velocity);\n\n        // Return to original position\n        const direction = particle.originalPosition.clone().sub(particle.position);\n        const distance = direction.length();\n        if (distance > 0.1) {\n          direction.normalize().multiplyScalar(0.1);\n          particle.velocity.add(direction);\n        }\n\n        // Damping\n        particle.velocity.multiplyScalar(0.95);\n\n        // Update geometry\n        geometry.attributes.position.array[i * 3] = particle.position.x;\n        geometry.attributes.position.array[i * 3 + 1] = particle.position.y;\n        geometry.attributes.position.array[i * 3 + 2] = particle.position.z;\n      });\n\n      geometry.attributes.position.needsUpdate = true;\n      points.rotation.y += 0.001;\n\n      renderer.render(scene, camera);\n    };\n\n    // Start animation\n    animate();\n\n    // Event listeners\n    window.addEventListener('resize', handleResize);\n    mountRef.current.addEventListener('mousemove', handleMouseMove);\n\n    // Handle window resize\n    function handleResize() {\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    }\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      mountRef.current.removeEventListener('mousemove', handleMouseMove);\n      cancelAnimationFrame(frameRef.current);\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return <div ref={mountRef} style={{ width: '100%', height: '600px' }} />;\n};\n\nexport default MorphingGeometry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}