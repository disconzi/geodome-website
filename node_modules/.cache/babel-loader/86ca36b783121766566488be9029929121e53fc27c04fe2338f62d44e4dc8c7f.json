{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ACESFilmicToneMapping, AnimationMixer, Box3, Euler, LoopPingPong, LoopRepeat, Matrix3, Object3D, PerspectiveCamera, Raycaster, Scene, Sphere, Triangle, Vector2, Vector3 } from 'three';\nimport { CSS2DRenderer } from 'three/examples/jsm/renderers/CSS2DRenderer.js';\nimport { reduceVertices } from 'three/examples/jsm/utils/SceneUtils.js';\nimport { $currentGLTF, $model, $originalGltfJson } from '../features/scene-graph.js';\nimport { $nodeFromIndex, $nodeFromPoint } from '../features/scene-graph/model.js';\nimport { $renderer } from '../model-viewer-base.js';\nimport { normalizeUnit } from '../styles/conversions.js';\nimport { parseExpressions } from '../styles/parsers.js';\nimport { Damper, SETTLING_TIME } from './Damper.js';\nimport { GroundedSkybox } from './GroundedSkybox.js';\nimport { Hotspot } from './Hotspot.js';\nimport { Shadow } from './Shadow.js';\nexport const GROUNDED_SKYBOX_SIZE = 10;\nconst MIN_SHADOW_RATIO = 100;\nexport const IlluminationRole = {\n  Primary: 'primary',\n  Secondary: 'secondary'\n};\nconst view = new Vector3();\nconst target = new Vector3();\nconst normalWorld = new Vector3();\nconst raycaster = new Raycaster();\nconst vector3 = new Vector3();\nconst ndc = new Vector2();\n/**\n * A THREE.Scene object that takes a Model and CanvasHTMLElement and\n * constructs a framed scene based off of the canvas dimensions.\n * Provides lights and cameras to be used in a renderer.\n */\nexport class ModelScene extends Scene {\n  constructor({\n    canvas,\n    element,\n    width,\n    height\n  }) {\n    super();\n    this.annotationRenderer = new CSS2DRenderer();\n    this.effectRenderer = null;\n    this.schemaElement = document.createElement('script');\n    this.width = 1;\n    this.height = 1;\n    this.aspect = 1;\n    this.scaleStep = 0;\n    this.renderCount = 0;\n    this.externalRenderer = null;\n    // These default camera values are never used, as they are reset once the\n    // model is loaded and framing is computed.\n    this.camera = new PerspectiveCamera(45, 1, 0.1, 100);\n    this.xrCamera = null;\n    this.url = null;\n    this.pivot = new Object3D();\n    this.target = new Object3D();\n    this.animationNames = [];\n    this.boundingBox = new Box3();\n    this.boundingSphere = new Sphere();\n    this.size = new Vector3();\n    this.idealAspect = 0;\n    this.framedFoVDeg = 0;\n    this.shadow = null;\n    this.shadowIntensity = 0;\n    this.shadowSoftness = 1;\n    this.bakedShadows = new Set();\n    this.exposure = 1;\n    this.toneMapping = ACESFilmicToneMapping;\n    this.canScale = true;\n    this.isDirty = false;\n    this.goalTarget = new Vector3();\n    this.targetDamperX = new Damper();\n    this.targetDamperY = new Damper();\n    this.targetDamperZ = new Damper();\n    this._currentGLTF = null;\n    this._model = null;\n    this.cancelPendingSourceChange = null;\n    this.animationsByName = new Map();\n    this.currentAnimationAction = null;\n    this.groundedSkybox = new GroundedSkybox();\n    this.name = 'ModelScene';\n    this.element = element;\n    this.canvas = canvas;\n    // These default camera values are never used, as they are reset once the\n    // model is loaded and framing is computed.\n    this.camera = new PerspectiveCamera(45, 1, 0.1, 100);\n    this.camera.name = 'MainCamera';\n    this.add(this.pivot);\n    this.pivot.name = 'Pivot';\n    this.pivot.add(this.target);\n    this.setSize(width, height);\n    this.target.name = 'Target';\n    this.mixer = new AnimationMixer(this.target);\n    const {\n      domElement\n    } = this.annotationRenderer;\n    const {\n      style\n    } = domElement;\n    style.display = 'none';\n    style.pointerEvents = 'none';\n    style.position = 'absolute';\n    style.top = '0';\n    this.element.shadowRoot.querySelector('.default').appendChild(domElement);\n    this.schemaElement.setAttribute('type', 'application/ld+json');\n  }\n  /**\n   * Function to create the context lazily, as when there is only one\n   * <model-viewer> element, the renderer's 3D context can be displayed\n   * directly. This extra context is necessary to copy the renderings into when\n   * there are more than one.\n   */\n  get context() {\n    return this.canvas.getContext('2d');\n  }\n  getCamera() {\n    return this.xrCamera != null ? this.xrCamera : this.camera;\n  }\n  queueRender() {\n    this.isDirty = true;\n  }\n  shouldRender() {\n    return this.isDirty;\n  }\n  hasRendered() {\n    this.isDirty = false;\n  }\n  forceRescale() {\n    this.scaleStep = -1;\n    this.queueRender();\n  }\n  /**\n   * Pass in a THREE.Object3D to be controlled\n   * by this model.\n   */\n  async setObject(model) {\n    this.reset();\n    this._model = model;\n    this.target.add(model);\n    await this.setupScene();\n  }\n  /**\n   * Sets the model via URL.\n   */\n  async setSource(url, progressCallback = () => {}) {\n    if (!url || url === this.url) {\n      progressCallback(1);\n      return;\n    }\n    this.reset();\n    this.url = url;\n    if (this.externalRenderer != null) {\n      const framingInfo = await this.externalRenderer.load(progressCallback);\n      this.boundingSphere.radius = framingInfo.framedRadius;\n      this.idealAspect = framingInfo.fieldOfViewAspect;\n      return;\n    }\n    // If we have pending work due to a previous source change in progress,\n    // cancel it so that we do not incur a race condition:\n    if (this.cancelPendingSourceChange != null) {\n      this.cancelPendingSourceChange();\n      this.cancelPendingSourceChange = null;\n    }\n    let gltf;\n    try {\n      gltf = await new Promise(async (resolve, reject) => {\n        this.cancelPendingSourceChange = () => reject();\n        try {\n          const result = await this.element[$renderer].loader.load(url, this.element, progressCallback);\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    } catch (error) {\n      if (error == null) {\n        // Loading was cancelled, so silently return\n        return;\n      }\n      throw error;\n    }\n    this.cancelPendingSourceChange = null;\n    this.reset();\n    this.url = url;\n    this._currentGLTF = gltf;\n    if (gltf != null) {\n      this._model = gltf.scene;\n      this.target.add(gltf.scene);\n    }\n    const {\n      animations\n    } = gltf;\n    const animationsByName = new Map();\n    const animationNames = [];\n    for (const animation of animations) {\n      animationsByName.set(animation.name, animation);\n      animationNames.push(animation.name);\n    }\n    this.animations = animations;\n    this.animationsByName = animationsByName;\n    this.animationNames = animationNames;\n    await this.setupScene();\n  }\n  async setupScene() {\n    this.applyTransform();\n    this.updateBoundingBox();\n    await this.updateFraming();\n    this.updateShadow();\n    this.setShadowIntensity(this.shadowIntensity);\n    this.setGroundedSkybox();\n  }\n  reset() {\n    this.url = null;\n    this.renderCount = 0;\n    this.queueRender();\n    if (this.shadow != null) {\n      this.shadow.setIntensity(0);\n    }\n    this.bakedShadows.clear();\n    const {\n      _model\n    } = this;\n    if (_model != null) {\n      _model.removeFromParent();\n      this._model = null;\n    }\n    const gltf = this._currentGLTF;\n    if (gltf != null) {\n      gltf.dispose();\n      this._currentGLTF = null;\n    }\n    if (this.currentAnimationAction != null) {\n      this.currentAnimationAction.stop();\n      this.currentAnimationAction = null;\n    }\n    this.mixer.stopAllAction();\n    this.mixer.uncacheRoot(this);\n  }\n  dispose() {\n    this.reset();\n    if (this.shadow != null) {\n      this.shadow.dispose();\n      this.shadow = null;\n    }\n    this.element[$currentGLTF] = null;\n    this.element[$originalGltfJson] = null;\n    this.element[$model] = null;\n  }\n  get currentGLTF() {\n    return this._currentGLTF;\n  }\n  /**\n   * Updates the ModelScene for a new container size in CSS pixels.\n   */\n  setSize(width, height) {\n    if (this.width === width && this.height === height) {\n      return;\n    }\n    this.width = Math.max(width, 1);\n    this.height = Math.max(height, 1);\n    this.annotationRenderer.setSize(width, height);\n    this.aspect = this.width / this.height;\n    if (this.externalRenderer != null) {\n      const dpr = window.devicePixelRatio;\n      this.externalRenderer.resize(width * dpr, height * dpr);\n    }\n    this.queueRender();\n  }\n  markBakedShadow(mesh) {\n    mesh.userData.noHit = true;\n    this.bakedShadows.add(mesh);\n  }\n  unmarkBakedShadow(mesh) {\n    mesh.userData.noHit = false;\n    mesh.visible = true;\n    this.bakedShadows.delete(mesh);\n    this.boundingBox.expandByObject(mesh);\n  }\n  findBakedShadows(group) {\n    const boundingBox = new Box3();\n    group.traverse(object => {\n      const mesh = object;\n      if (!mesh.material) {\n        return;\n      }\n      const material = mesh.material;\n      if (!material.transparent) {\n        return;\n      }\n      boundingBox.setFromObject(mesh);\n      const size = boundingBox.getSize(vector3);\n      const minDim = Math.min(size.x, size.y, size.z);\n      const maxDim = Math.max(size.x, size.y, size.z);\n      if (maxDim < MIN_SHADOW_RATIO * minDim) {\n        return;\n      }\n      this.markBakedShadow(mesh);\n    });\n  }\n  checkBakedShadows() {\n    const {\n      min,\n      max\n    } = this.boundingBox;\n    const shadowBox = new Box3();\n    this.boundingBox.getSize(this.size);\n    for (const mesh of this.bakedShadows) {\n      shadowBox.setFromObject(mesh);\n      if (shadowBox.min.y < min.y + this.size.y / MIN_SHADOW_RATIO && shadowBox.min.x <= min.x && shadowBox.max.x >= max.x && shadowBox.min.z <= min.z && shadowBox.max.z >= max.z) {\n        // floor shadow\n        continue;\n      }\n      if (shadowBox.min.z < min.z + this.size.z / MIN_SHADOW_RATIO && shadowBox.min.x <= min.x && shadowBox.max.x >= max.x && shadowBox.min.y <= min.y && shadowBox.max.y >= max.y) {\n        // wall shadow\n        continue;\n      }\n      this.unmarkBakedShadow(mesh);\n    }\n  }\n  applyTransform() {\n    const {\n      model\n    } = this;\n    if (model == null) {\n      return;\n    }\n    const orientation = parseExpressions(this.element.orientation)[0].terms;\n    const roll = normalizeUnit(orientation[0]).number;\n    const pitch = normalizeUnit(orientation[1]).number;\n    const yaw = normalizeUnit(orientation[2]).number;\n    model.quaternion.setFromEuler(new Euler(pitch, yaw, roll, 'YXZ'));\n    const scale = parseExpressions(this.element.scale)[0].terms;\n    model.scale.set(scale[0].number, scale[1].number, scale[2].number);\n  }\n  updateBoundingBox() {\n    const {\n      model\n    } = this;\n    if (model == null) {\n      return;\n    }\n    this.target.remove(model);\n    this.findBakedShadows(model);\n    const bound = (box, vertex) => {\n      return box.expandByPoint(vertex);\n    };\n    this.setBakedShadowVisibility(false);\n    this.boundingBox = reduceVertices(model, bound, new Box3());\n    // If there's nothing but the baked shadow, then it's not a baked shadow.\n    if (this.boundingBox.isEmpty()) {\n      this.setBakedShadowVisibility(true);\n      this.bakedShadows.forEach(mesh => this.unmarkBakedShadow(mesh));\n      this.boundingBox = reduceVertices(model, bound, new Box3());\n    }\n    this.checkBakedShadows();\n    this.setBakedShadowVisibility();\n    this.boundingBox.getSize(this.size);\n    this.target.add(model);\n  }\n  /**\n   * Calculates the boundingSphere and idealAspect that allows the 3D\n   * object to be framed tightly in a 2D window of any aspect ratio without\n   * clipping at any camera orbit. The camera's center target point can be\n   * optionally specified. If no center is specified, it defaults to the center\n   * of the bounding box, which means asymmetric models will tend to be tight on\n   * one side instead of both. Proper choice of center can correct this.\n   */\n  async updateFraming() {\n    const {\n      model\n    } = this;\n    if (model == null) {\n      return;\n    }\n    this.target.remove(model);\n    this.setBakedShadowVisibility(false);\n    const {\n      center\n    } = this.boundingSphere;\n    this.element.requestUpdate('cameraTarget');\n    await this.element.updateComplete;\n    center.copy(this.getTarget());\n    const radiusSquared = (value, vertex) => {\n      return Math.max(value, center.distanceToSquared(vertex));\n    };\n    this.boundingSphere.radius = Math.sqrt(reduceVertices(model, radiusSquared, 0));\n    const horizontalTanFov = (value, vertex) => {\n      vertex.sub(center);\n      const radiusXZ = Math.sqrt(vertex.x * vertex.x + vertex.z * vertex.z);\n      return Math.max(value, radiusXZ / (this.idealCameraDistance() - Math.abs(vertex.y)));\n    };\n    this.idealAspect = reduceVertices(model, horizontalTanFov, 0) / Math.tan(this.framedFoVDeg / 2 * Math.PI / 180);\n    this.setBakedShadowVisibility();\n    this.target.add(model);\n  }\n  setBakedShadowVisibility(visible = this.shadowIntensity <= 0) {\n    for (const shadow of this.bakedShadows) {\n      shadow.visible = visible;\n    }\n  }\n  idealCameraDistance() {\n    const halfFovRad = this.framedFoVDeg / 2 * Math.PI / 180;\n    return this.boundingSphere.radius / Math.sin(halfFovRad);\n  }\n  /**\n   * Set's the framedFieldOfView based on the aspect ratio of the window in\n   * order to keep the model fully visible at any camera orientation.\n   */\n  adjustedFoV(fovDeg) {\n    const vertical = Math.tan(fovDeg / 2 * Math.PI / 180) * Math.max(1, this.idealAspect / this.aspect);\n    return 2 * Math.atan(vertical) * 180 / Math.PI;\n  }\n  getNDC(clientX, clientY) {\n    if (this.xrCamera != null) {\n      ndc.set(clientX / window.screen.width, clientY / window.screen.height);\n    } else {\n      const rect = this.element.getBoundingClientRect();\n      ndc.set((clientX - rect.x) / this.width, (clientY - rect.y) / this.height);\n    }\n    ndc.multiplyScalar(2).subScalar(1);\n    ndc.y *= -1;\n    return ndc;\n  }\n  /**\n   * Returns the size of the corresponding canvas element.\n   */\n  getSize() {\n    return {\n      width: this.width,\n      height: this.height\n    };\n  }\n  setEnvironmentAndSkybox(environment, skybox) {\n    if (this.element[$renderer].arRenderer.presentedScene === this) {\n      return;\n    }\n    this.environment = environment;\n    this.setBackground(skybox);\n    this.queueRender();\n  }\n  setBackground(skybox) {\n    this.groundedSkybox.map = skybox;\n    if (this.groundedSkybox.isUsable()) {\n      this.target.add(this.groundedSkybox);\n      this.background = null;\n    } else {\n      this.target.remove(this.groundedSkybox);\n      this.background = skybox;\n    }\n  }\n  farRadius() {\n    return this.boundingSphere.radius * (this.groundedSkybox.parent != null ? GROUNDED_SKYBOX_SIZE : 1);\n  }\n  setGroundedSkybox() {\n    const heightNode = parseExpressions(this.element.skyboxHeight)[0].terms[0];\n    const height = normalizeUnit(heightNode).number;\n    const radius = GROUNDED_SKYBOX_SIZE * this.boundingSphere.radius;\n    this.groundedSkybox.updateGeometry(height, radius);\n    this.groundedSkybox.position.y = height - (this.shadow ? 2 * this.shadow.gap() : 0);\n    this.setBackground(this.groundedSkybox.map);\n  }\n  /**\n   * Sets the point in model coordinates the model should orbit/pivot around.\n   */\n  setTarget(modelX, modelY, modelZ) {\n    this.goalTarget.set(-modelX, -modelY, -modelZ);\n  }\n  /**\n   * Set the decay time of, affects the speed of target transitions.\n   */\n  setTargetDamperDecayTime(decayMilliseconds) {\n    this.targetDamperX.setDecayTime(decayMilliseconds);\n    this.targetDamperY.setDecayTime(decayMilliseconds);\n    this.targetDamperZ.setDecayTime(decayMilliseconds);\n  }\n  /**\n   * Gets the point in model coordinates the model should orbit/pivot around.\n   */\n  getTarget() {\n    return this.goalTarget.clone().multiplyScalar(-1);\n  }\n  /**\n   * Gets the current target point, which may not equal the goal returned by\n   * getTarget() due to finite input decay smoothing.\n   */\n  getDynamicTarget() {\n    return this.target.position.clone().multiplyScalar(-1);\n  }\n  /**\n   * Shifts the model to the target point immediately instead of easing in.\n   */\n  jumpToGoal() {\n    this.updateTarget(SETTLING_TIME);\n  }\n  /**\n   * This should be called every frame with the frame delta to cause the target\n   * to transition to its set point.\n   */\n  updateTarget(delta) {\n    const goal = this.goalTarget;\n    const target = this.target.position;\n    if (!goal.equals(target)) {\n      const normalization = this.boundingSphere.radius / 10;\n      let {\n        x,\n        y,\n        z\n      } = target;\n      x = this.targetDamperX.update(x, goal.x, delta, normalization);\n      y = this.targetDamperY.update(y, goal.y, delta, normalization);\n      z = this.targetDamperZ.update(z, goal.z, delta, normalization);\n      this.groundedSkybox.position.x = -x;\n      this.groundedSkybox.position.z = -z;\n      this.target.position.set(x, y, z);\n      this.target.updateMatrixWorld();\n      this.queueRender();\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Yaw the +z (front) of the model toward the indicated world coordinates.\n   */\n  pointTowards(worldX, worldZ) {\n    const {\n      x,\n      z\n    } = this.position;\n    this.yaw = Math.atan2(worldX - x, worldZ - z);\n  }\n  get model() {\n    return this._model;\n  }\n  /**\n   * Yaw is the scene's orientation about the y-axis, around the rotation\n   * center.\n   */\n  set yaw(radiansY) {\n    this.pivot.rotation.y = radiansY;\n    this.groundedSkybox.rotation.y = -radiansY;\n    this.queueRender();\n  }\n  get yaw() {\n    return this.pivot.rotation.y;\n  }\n  set animationTime(value) {\n    this.mixer.setTime(value);\n    this.queueShadowRender();\n  }\n  get animationTime() {\n    if (this.currentAnimationAction != null) {\n      const loopCount = Math.max(this.currentAnimationAction._loopCount, 0);\n      if (this.currentAnimationAction.loop === LoopPingPong && (loopCount & 1) === 1) {\n        return this.duration - this.currentAnimationAction.time;\n      } else {\n        return this.currentAnimationAction.time;\n      }\n    }\n    return 0;\n  }\n  set animationTimeScale(value) {\n    this.mixer.timeScale = value;\n  }\n  get animationTimeScale() {\n    return this.mixer.timeScale;\n  }\n  get duration() {\n    if (this.currentAnimationAction != null && this.currentAnimationAction.getClip()) {\n      return this.currentAnimationAction.getClip().duration;\n    }\n    return 0;\n  }\n  get hasActiveAnimation() {\n    return this.currentAnimationAction != null;\n  }\n  /**\n   * Plays an animation if there are any associated with the current model.\n   * Accepts an optional string name of an animation to play. If no name is\n   * provided, or if no animation is found by the given name, always falls back\n   * to playing the first animation.\n   */\n  playAnimation(name = null, crossfadeTime = 0, loopMode = LoopRepeat, repetitionCount = Infinity) {\n    if (this._currentGLTF == null) {\n      return;\n    }\n    const {\n      animations\n    } = this;\n    if (animations == null || animations.length === 0) {\n      return;\n    }\n    let animationClip = null;\n    if (name != null) {\n      animationClip = this.animationsByName.get(name);\n      if (animationClip == null) {\n        const parsedAnimationIndex = parseInt(name);\n        if (!isNaN(parsedAnimationIndex) && parsedAnimationIndex >= 0 && parsedAnimationIndex < animations.length) {\n          animationClip = animations[parsedAnimationIndex];\n        }\n      }\n    }\n    if (animationClip == null) {\n      animationClip = animations[0];\n    }\n    try {\n      const {\n        currentAnimationAction: lastAnimationAction\n      } = this;\n      const action = this.mixer.clipAction(animationClip, this);\n      this.currentAnimationAction = action;\n      if (this.element.paused) {\n        this.mixer.stopAllAction();\n      } else {\n        action.paused = false;\n        if (lastAnimationAction != null && action !== lastAnimationAction) {\n          action.crossFadeFrom(lastAnimationAction, crossfadeTime, false);\n        } else if (this.animationTimeScale > 0 && this.animationTime == this.duration) {\n          // This is a workaround for what I believe is a three.js bug.\n          this.animationTime = 0;\n        }\n      }\n      action.setLoop(loopMode, repetitionCount);\n      action.enabled = true;\n      action.clampWhenFinished = true;\n      action.play();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  stopAnimation() {\n    this.currentAnimationAction = null;\n    this.mixer.stopAllAction();\n  }\n  updateAnimation(step) {\n    this.mixer.update(step);\n    this.queueShadowRender();\n  }\n  subscribeMixerEvent(event, callback) {\n    this.mixer.addEventListener(event, callback);\n  }\n  /**\n   * Call if the object has been changed in such a way that the shadow's shape\n   * has changed (not a rotation about the Y axis).\n   */\n  updateShadow() {\n    const shadow = this.shadow;\n    if (shadow != null) {\n      const side = this.element.arPlacement === 'wall' ? 'back' : 'bottom';\n      shadow.setScene(this, this.shadowSoftness, side);\n      shadow.needsUpdate = true;\n    }\n  }\n  renderShadow(renderer) {\n    const shadow = this.shadow;\n    if (shadow != null && shadow.needsUpdate == true) {\n      shadow.render(renderer, this);\n      shadow.needsUpdate = false;\n    }\n  }\n  queueShadowRender() {\n    if (this.shadow != null) {\n      this.shadow.needsUpdate = true;\n    }\n  }\n  /**\n   * Sets the shadow's intensity, lazily creating the shadow as necessary.\n   */\n  setShadowIntensity(shadowIntensity) {\n    this.shadowIntensity = shadowIntensity;\n    if (this._currentGLTF == null) {\n      return;\n    }\n    this.setBakedShadowVisibility();\n    if (shadowIntensity <= 0 && this.shadow == null) {\n      return;\n    }\n    if (this.shadow == null) {\n      const side = this.element.arPlacement === 'wall' ? 'back' : 'bottom';\n      this.shadow = new Shadow(this, this.shadowSoftness, side);\n    }\n    this.shadow.setIntensity(shadowIntensity);\n  }\n  /**\n   * Sets the shadow's softness by mapping a [0, 1] softness parameter to the\n   * shadow's resolution. This involves reallocation, so it should not be\n   * changed frequently. Softer shadows are cheaper to render.\n   */\n  setShadowSoftness(softness) {\n    this.shadowSoftness = softness;\n    const shadow = this.shadow;\n    if (shadow != null) {\n      shadow.setSoftness(softness);\n    }\n  }\n  /**\n   * Shift the floor vertically from the bottom of the model's bounding box by\n   * offset (should generally be negative).\n   */\n  setShadowOffset(offset) {\n    const shadow = this.shadow;\n    if (shadow != null) {\n      shadow.setOffset(offset);\n    }\n  }\n  getHit(object = this) {\n    const hits = raycaster.intersectObject(object, true);\n    return hits.find(hit => hit.object.visible && !hit.object.userData.noHit);\n  }\n  hitFromController(controller, object = this) {\n    raycaster.setFromXRController(controller);\n    return this.getHit(object);\n  }\n  hitFromPoint(ndcPosition, object = this) {\n    raycaster.setFromCamera(ndcPosition, this.getCamera());\n    return this.getHit(object);\n  }\n  /**\n   * This method returns the world position, model-space normal and texture\n   * coordinate of the point on the mesh corresponding to the input pixel\n   * coordinates given relative to the model-viewer element. If the mesh\n   * is not hit, the result is null.\n   */\n  positionAndNormalFromPoint(ndcPosition, object = this) {\n    var _a;\n    const hit = this.hitFromPoint(ndcPosition, object);\n    if (hit == null) {\n      return null;\n    }\n    const position = hit.point;\n    const normal = hit.face != null ? hit.face.normal.clone().applyNormalMatrix(new Matrix3().getNormalMatrix(hit.object.matrixWorld)) : raycaster.ray.direction.clone().multiplyScalar(-1);\n    const uv = (_a = hit.uv) !== null && _a !== void 0 ? _a : null;\n    return {\n      position,\n      normal,\n      uv\n    };\n  }\n  /**\n   * This method returns a dynamic hotspot ID string of the point on the mesh\n   * corresponding to the input pixel coordinates given relative to the\n   * model-viewer element. The ID string can be used in the data-surface\n   * attribute of the hotspot to make it follow this point on the surface even\n   * as the model animates. If the mesh is not hit, the result is null.\n   */\n  surfaceFromPoint(ndcPosition, object = this) {\n    const model = this.element.model;\n    if (model == null) {\n      return null;\n    }\n    const hit = this.hitFromPoint(ndcPosition, object);\n    if (hit == null || hit.face == null) {\n      return null;\n    }\n    const node = model[$nodeFromPoint](hit);\n    const {\n      meshes,\n      primitives\n    } = node.mesh.userData.associations;\n    const va = new Vector3();\n    const vb = new Vector3();\n    const vc = new Vector3();\n    const {\n      a,\n      b,\n      c\n    } = hit.face;\n    const mesh = hit.object;\n    mesh.getVertexPosition(a, va);\n    mesh.getVertexPosition(b, vb);\n    mesh.getVertexPosition(c, vc);\n    const tri = new Triangle(va, vb, vc);\n    const uvw = new Vector3();\n    tri.getBarycoord(mesh.worldToLocal(hit.point), uvw);\n    return `${meshes} ${primitives} ${a} ${b} ${c} ${uvw.x.toFixed(3)} ${uvw.y.toFixed(3)} ${uvw.z.toFixed(3)}`;\n  }\n  /**\n   * The following methods are for operating on the set of Hotspot objects\n   * attached to the scene. These come from DOM elements, provided to slots by\n   * the Annotation Mixin.\n   */\n  addHotspot(hotspot) {\n    this.target.add(hotspot);\n    // This happens automatically in render(), but we do it early so that\n    // the slots appear in the shadow DOM and the elements get attached,\n    // allowing us to dispatch events on them.\n    this.annotationRenderer.domElement.appendChild(hotspot.element);\n    this.updateSurfaceHotspot(hotspot);\n  }\n  removeHotspot(hotspot) {\n    this.target.remove(hotspot);\n  }\n  /**\n   * Helper method to apply a function to all hotspots.\n   */\n  forHotspots(func) {\n    const {\n      children\n    } = this.target;\n    for (let i = 0, l = children.length; i < l; i++) {\n      const hotspot = children[i];\n      if (hotspot instanceof Hotspot) {\n        func(hotspot);\n      }\n    }\n  }\n  /**\n   * Lazy initializer for surface hotspots - will only run once.\n   */\n  updateSurfaceHotspot(hotspot) {\n    if (hotspot.surface == null || this.element.model == null) {\n      return;\n    }\n    const nodes = parseExpressions(hotspot.surface)[0].terms;\n    if (nodes.length != 8) {\n      console.warn(hotspot.surface + ' does not have exactly 8 numbers.');\n      return;\n    }\n    const primitiveNode = this.element.model[$nodeFromIndex](nodes[0].number, nodes[1].number);\n    if (primitiveNode == null) {\n      console.warn(hotspot.surface + ' does not match a node/primitive in this glTF! Skipping this hotspot.');\n      return;\n    }\n    const numVert = primitiveNode.mesh.geometry.attributes.position.count;\n    const tri = new Vector3(nodes[2].number, nodes[3].number, nodes[4].number);\n    if (tri.x >= numVert || tri.y >= numVert || tri.z >= numVert) {\n      console.warn(hotspot.surface + ' vertex indices out of range in this glTF! Skipping this hotspot.');\n      return;\n    }\n    const bary = new Vector3(nodes[5].number, nodes[6].number, nodes[7].number);\n    hotspot.mesh = primitiveNode.mesh;\n    hotspot.tri = tri;\n    hotspot.bary = bary;\n    hotspot.updateSurface();\n  }\n  /**\n   * Update positions of surface hotspots to follow model animation.\n   */\n  animateSurfaceHotspots() {\n    if (this.element.paused) {\n      return;\n    }\n    this.forHotspots(hotspot => {\n      hotspot.updateSurface();\n    });\n  }\n  /**\n   * Update the CSS visibility of the hotspots based on whether their normals\n   * point toward the camera.\n   */\n  updateHotspotsVisibility(viewerPosition) {\n    this.forHotspots(hotspot => {\n      view.copy(viewerPosition);\n      target.setFromMatrixPosition(hotspot.matrixWorld);\n      view.sub(target);\n      normalWorld.copy(hotspot.normal).transformDirection(this.target.matrixWorld);\n      if (view.dot(normalWorld) < 0) {\n        hotspot.hide();\n      } else {\n        hotspot.show();\n      }\n    });\n  }\n  /**\n   * Rotate all hotspots to an absolute orientation given by the input number of\n   * radians. Zero returns them to upright.\n   */\n  orientHotspots(radians) {\n    this.forHotspots(hotspot => {\n      hotspot.orient(radians);\n    });\n  }\n  /**\n   * Set the rendering visibility of all hotspots. This is used to hide them\n   * during transitions and such.\n   */\n  setHotspotsVisibility(visible) {\n    this.forHotspots(hotspot => {\n      hotspot.visible = visible;\n    });\n  }\n  updateSchema(src) {\n    var _a;\n    const {\n      schemaElement,\n      element\n    } = this;\n    const {\n      alt,\n      poster,\n      iosSrc\n    } = element;\n    if (src != null) {\n      const encoding = [{\n        '@type': 'MediaObject',\n        contentUrl: src,\n        encodingFormat: ((_a = src.split('.').pop()) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'gltf' ? 'model/gltf+json' : 'model/gltf-binary'\n      }];\n      if (iosSrc) {\n        encoding.push({\n          '@type': 'MediaObject',\n          contentUrl: iosSrc,\n          encodingFormat: 'model/vnd.usdz+zip'\n        });\n      }\n      const structuredData = {\n        '@context': 'http://schema.org/',\n        '@type': '3DModel',\n        image: poster !== null && poster !== void 0 ? poster : undefined,\n        name: alt !== null && alt !== void 0 ? alt : undefined,\n        encoding\n      };\n      schemaElement.textContent = JSON.stringify(structuredData);\n      document.head.appendChild(schemaElement);\n    } else if (schemaElement.parentElement != null) {\n      schemaElement.parentElement.removeChild(schemaElement);\n    }\n  }\n}","map":{"version":3,"names":["ACESFilmicToneMapping","AnimationMixer","Box3","Euler","LoopPingPong","LoopRepeat","Matrix3","Object3D","PerspectiveCamera","Raycaster","Scene","Sphere","Triangle","Vector2","Vector3","CSS2DRenderer","reduceVertices","$currentGLTF","$model","$originalGltfJson","$nodeFromIndex","$nodeFromPoint","$renderer","normalizeUnit","parseExpressions","Damper","SETTLING_TIME","GroundedSkybox","Hotspot","Shadow","GROUNDED_SKYBOX_SIZE","MIN_SHADOW_RATIO","IlluminationRole","Primary","Secondary","view","target","normalWorld","raycaster","vector3","ndc","ModelScene","constructor","canvas","element","width","height","annotationRenderer","effectRenderer","schemaElement","document","createElement","aspect","scaleStep","renderCount","externalRenderer","camera","xrCamera","url","pivot","animationNames","boundingBox","boundingSphere","size","idealAspect","framedFoVDeg","shadow","shadowIntensity","shadowSoftness","bakedShadows","Set","exposure","toneMapping","canScale","isDirty","goalTarget","targetDamperX","targetDamperY","targetDamperZ","_currentGLTF","_model","cancelPendingSourceChange","animationsByName","Map","currentAnimationAction","groundedSkybox","name","add","setSize","mixer","domElement","style","display","pointerEvents","position","top","shadowRoot","querySelector","appendChild","setAttribute","context","getContext","getCamera","queueRender","shouldRender","hasRendered","forceRescale","setObject","model","reset","setupScene","setSource","progressCallback","framingInfo","load","radius","framedRadius","fieldOfViewAspect","gltf","Promise","resolve","reject","result","loader","error","scene","animations","animation","set","push","applyTransform","updateBoundingBox","updateFraming","updateShadow","setShadowIntensity","setGroundedSkybox","setIntensity","clear","removeFromParent","dispose","stop","stopAllAction","uncacheRoot","currentGLTF","Math","max","dpr","window","devicePixelRatio","resize","markBakedShadow","mesh","userData","noHit","unmarkBakedShadow","visible","delete","expandByObject","findBakedShadows","group","traverse","object","material","transparent","setFromObject","getSize","minDim","min","x","y","z","maxDim","checkBakedShadows","shadowBox","orientation","terms","roll","number","pitch","yaw","quaternion","setFromEuler","scale","remove","bound","box","vertex","expandByPoint","setBakedShadowVisibility","isEmpty","forEach","center","requestUpdate","updateComplete","copy","getTarget","radiusSquared","value","distanceToSquared","sqrt","horizontalTanFov","sub","radiusXZ","idealCameraDistance","abs","tan","PI","halfFovRad","sin","adjustedFoV","fovDeg","vertical","atan","getNDC","clientX","clientY","screen","rect","getBoundingClientRect","multiplyScalar","subScalar","setEnvironmentAndSkybox","environment","skybox","arRenderer","presentedScene","setBackground","map","isUsable","background","farRadius","parent","heightNode","skyboxHeight","updateGeometry","gap","setTarget","modelX","modelY","modelZ","setTargetDamperDecayTime","decayMilliseconds","setDecayTime","clone","getDynamicTarget","jumpToGoal","updateTarget","delta","goal","equals","normalization","update","updateMatrixWorld","pointTowards","worldX","worldZ","atan2","radiansY","rotation","animationTime","setTime","queueShadowRender","loopCount","_loopCount","loop","duration","time","animationTimeScale","timeScale","getClip","hasActiveAnimation","playAnimation","crossfadeTime","loopMode","repetitionCount","Infinity","length","animationClip","get","parsedAnimationIndex","parseInt","isNaN","lastAnimationAction","action","clipAction","paused","crossFadeFrom","setLoop","enabled","clampWhenFinished","play","console","stopAnimation","updateAnimation","step","subscribeMixerEvent","event","callback","addEventListener","side","arPlacement","setScene","needsUpdate","renderShadow","renderer","render","setShadowSoftness","softness","setSoftness","setShadowOffset","offset","setOffset","getHit","hits","intersectObject","find","hit","hitFromController","controller","setFromXRController","hitFromPoint","ndcPosition","setFromCamera","positionAndNormalFromPoint","point","normal","face","applyNormalMatrix","getNormalMatrix","matrixWorld","ray","direction","uv","_a","surfaceFromPoint","node","meshes","primitives","associations","va","vb","vc","a","b","c","getVertexPosition","tri","uvw","getBarycoord","worldToLocal","toFixed","addHotspot","hotspot","updateSurfaceHotspot","removeHotspot","forHotspots","func","children","i","l","surface","nodes","warn","primitiveNode","numVert","geometry","attributes","count","bary","updateSurface","animateSurfaceHotspots","updateHotspotsVisibility","viewerPosition","setFromMatrixPosition","transformDirection","dot","hide","show","orientHotspots","radians","orient","setHotspotsVisibility","updateSchema","src","alt","poster","iosSrc","encoding","contentUrl","encodingFormat","split","pop","toLowerCase","structuredData","image","undefined","textContent","JSON","stringify","head","parentElement","removeChild"],"sources":["/Users/leandrodisconzi/CascadeProjects/geodome-website/node_modules/@google/model-viewer/src/three-components/ModelScene.ts"],"sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ACESFilmicToneMapping, AnimationAction, AnimationActionLoopStyles, AnimationClip, AnimationMixer, Box3, Camera, Euler, Event as ThreeEvent, LoopPingPong, LoopRepeat, Material, Matrix3, Mesh, Object3D, PerspectiveCamera, Raycaster, Scene, Sphere, Texture, ToneMapping, Triangle, Vector2, Vector3, WebGLRenderer, XRTargetRaySpace} from 'three';\nimport {CSS2DRenderer} from 'three/examples/jsm/renderers/CSS2DRenderer.js';\nimport {reduceVertices} from 'three/examples/jsm/utils/SceneUtils.js';\n\nimport {$currentGLTF, $model, $originalGltfJson} from '../features/scene-graph.js';\nimport {$nodeFromIndex, $nodeFromPoint} from '../features/scene-graph/model.js';\nimport ModelViewerElementBase, {$renderer, EffectComposerInterface, RendererInterface} from '../model-viewer-base.js';\nimport {ModelViewerElement} from '../model-viewer.js';\nimport {normalizeUnit} from '../styles/conversions.js';\nimport {NumberNode, parseExpressions} from '../styles/parsers.js';\n\nimport {Damper, SETTLING_TIME} from './Damper.js';\nimport {ModelViewerGLTFInstance} from './gltf-instance/ModelViewerGLTFInstance.js';\nimport {GroundedSkybox} from './GroundedSkybox.js';\nimport {Hotspot} from './Hotspot.js';\nimport {Shadow} from './Shadow.js';\n\nexport const GROUNDED_SKYBOX_SIZE = 10;\nconst MIN_SHADOW_RATIO = 100;\n\nexport interface ModelLoadEvent extends ThreeEvent {\n  url: string;\n}\n\nexport interface ModelSceneConfig {\n  element: ModelViewerElementBase;\n  canvas: HTMLCanvasElement;\n  width: number;\n  height: number;\n}\n\nexport type IlluminationRole = 'primary'|'secondary';\n\nexport const IlluminationRole: {[index: string]: IlluminationRole} = {\n  Primary: 'primary',\n  Secondary: 'secondary'\n};\n\nconst view = new Vector3();\nconst target = new Vector3();\nconst normalWorld = new Vector3();\n\nconst raycaster = new Raycaster();\nconst vector3 = new Vector3();\nconst ndc = new Vector2();\n\n/**\n * A THREE.Scene object that takes a Model and CanvasHTMLElement and\n * constructs a framed scene based off of the canvas dimensions.\n * Provides lights and cameras to be used in a renderer.\n */\nexport class ModelScene extends Scene {\n  public element: ModelViewerElement;\n  public canvas: HTMLCanvasElement;\n  public annotationRenderer = new CSS2DRenderer();\n  public effectRenderer: EffectComposerInterface|null = null;\n  public schemaElement = document.createElement('script');\n  public width = 1;\n  public height = 1;\n  public aspect = 1;\n  public scaleStep = 0;\n  public renderCount = 0;\n  public externalRenderer: RendererInterface|null = null;\n\n  // These default camera values are never used, as they are reset once the\n  // model is loaded and framing is computed.\n  public camera = new PerspectiveCamera(45, 1, 0.1, 100);\n  public xrCamera: Camera|null = null;\n\n  public url: string|null = null;\n  public pivot = new Object3D();\n  public target = new Object3D();\n  public animationNames: Array<string> = [];\n  public boundingBox = new Box3();\n  public boundingSphere = new Sphere();\n  public size = new Vector3();\n  public idealAspect = 0;\n  public framedFoVDeg = 0;\n\n  public shadow: Shadow|null = null;\n  public shadowIntensity = 0;\n  public shadowSoftness = 1;\n  public bakedShadows = new Set<Mesh>();\n\n  public exposure = 1;\n  public toneMapping: ToneMapping = ACESFilmicToneMapping;\n  public canScale = true;\n\n  private isDirty = false;\n\n  private goalTarget = new Vector3();\n  private targetDamperX = new Damper();\n  private targetDamperY = new Damper();\n  private targetDamperZ = new Damper();\n\n  private _currentGLTF: ModelViewerGLTFInstance|null = null;\n  private _model: Object3D|null = null;\n  private mixer: AnimationMixer;\n  private cancelPendingSourceChange: (() => void)|null = null;\n  private animationsByName: Map<string, AnimationClip> = new Map();\n  private currentAnimationAction: AnimationAction|null = null;\n\n  private groundedSkybox = new GroundedSkybox();\n\n  constructor({canvas, element, width, height}: ModelSceneConfig) {\n    super();\n\n    this.name = 'ModelScene';\n\n    this.element = element as ModelViewerElement;\n    this.canvas = canvas;\n\n    // These default camera values are never used, as they are reset once the\n    // model is loaded and framing is computed.\n    this.camera = new PerspectiveCamera(45, 1, 0.1, 100);\n    this.camera.name = 'MainCamera';\n\n    this.add(this.pivot);\n    this.pivot.name = 'Pivot';\n\n    this.pivot.add(this.target);\n\n    this.setSize(width, height);\n\n    this.target.name = 'Target';\n\n    this.mixer = new AnimationMixer(this.target);\n\n    const {domElement} = this.annotationRenderer;\n    const {style} = domElement;\n    style.display = 'none';\n    style.pointerEvents = 'none';\n    style.position = 'absolute';\n    style.top = '0';\n    this.element.shadowRoot!.querySelector('.default')!.appendChild(domElement);\n\n    this.schemaElement.setAttribute('type', 'application/ld+json');\n  }\n\n  /**\n   * Function to create the context lazily, as when there is only one\n   * <model-viewer> element, the renderer's 3D context can be displayed\n   * directly. This extra context is necessary to copy the renderings into when\n   * there are more than one.\n   */\n  get context() {\n    return this.canvas.getContext('2d');\n  }\n\n  getCamera(): Camera {\n    return this.xrCamera != null ? this.xrCamera : this.camera;\n  }\n\n  queueRender() {\n    this.isDirty = true;\n  }\n\n  shouldRender() {\n    return this.isDirty;\n  }\n\n  hasRendered() {\n    this.isDirty = false;\n  }\n\n  forceRescale() {\n    this.scaleStep = -1;\n    this.queueRender();\n  }\n\n  /**\n   * Pass in a THREE.Object3D to be controlled\n   * by this model.\n   */\n  async setObject(model: Object3D) {\n    this.reset();\n    this._model = model;\n    this.target.add(model);\n    await this.setupScene();\n  }\n\n  /**\n   * Sets the model via URL.\n   */\n\n  async setSource(\n      url: string|null,\n      progressCallback: (progress: number) => void = () => {}) {\n    if (!url || url === this.url) {\n      progressCallback(1);\n      return;\n    }\n    this.reset();\n    this.url = url;\n\n    if (this.externalRenderer != null) {\n      const framingInfo = await this.externalRenderer.load(progressCallback);\n\n      this.boundingSphere.radius = framingInfo.framedRadius;\n      this.idealAspect = framingInfo.fieldOfViewAspect;\n      return;\n    }\n\n    // If we have pending work due to a previous source change in progress,\n    // cancel it so that we do not incur a race condition:\n    if (this.cancelPendingSourceChange != null) {\n      this.cancelPendingSourceChange!();\n      this.cancelPendingSourceChange = null;\n    }\n\n    let gltf: ModelViewerGLTFInstance;\n\n    try {\n      gltf = await new Promise<ModelViewerGLTFInstance>(\n          async (resolve, reject) => {\n            this.cancelPendingSourceChange = () => reject();\n            try {\n              const result = await this.element[$renderer].loader.load(\n                  url, this.element, progressCallback);\n              resolve(result);\n            } catch (error) {\n              reject(error);\n            }\n          });\n    } catch (error) {\n      if (error == null) {\n        // Loading was cancelled, so silently return\n        return;\n      }\n\n      throw error;\n    }\n\n    this.cancelPendingSourceChange = null;\n    this.reset();\n    this.url = url;\n    this._currentGLTF = gltf;\n\n    if (gltf != null) {\n      this._model = gltf.scene;\n      this.target.add(gltf.scene);\n    }\n\n    const {animations} = gltf!;\n    const animationsByName = new Map();\n    const animationNames = [];\n\n    for (const animation of animations) {\n      animationsByName.set(animation.name, animation);\n      animationNames.push(animation.name);\n    }\n\n    this.animations = animations;\n    this.animationsByName = animationsByName;\n    this.animationNames = animationNames;\n\n    await this.setupScene();\n  }\n\n  private async setupScene() {\n    this.applyTransform();\n    this.updateBoundingBox();\n\n    await this.updateFraming();\n\n    this.updateShadow();\n    this.setShadowIntensity(this.shadowIntensity);\n\n    this.setGroundedSkybox();\n  }\n\n  reset() {\n    this.url = null;\n    this.renderCount = 0;\n    this.queueRender();\n    if (this.shadow != null) {\n      this.shadow.setIntensity(0);\n    }\n    this.bakedShadows.clear();\n\n    const {_model} = this;\n    if (_model != null) {\n      _model.removeFromParent();\n      this._model = null;\n    }\n\n    const gltf = this._currentGLTF;\n    if (gltf != null) {\n      gltf.dispose();\n      this._currentGLTF = null;\n    }\n\n    if (this.currentAnimationAction != null) {\n      this.currentAnimationAction.stop();\n      this.currentAnimationAction = null;\n    }\n\n    this.mixer.stopAllAction();\n    this.mixer.uncacheRoot(this);\n  }\n\n  dispose() {\n    this.reset();\n    if (this.shadow != null) {\n      this.shadow.dispose();\n      this.shadow = null;\n    }\n    (this.element as any)[$currentGLTF] = null;\n    (this.element as any)[$originalGltfJson] = null;\n    (this.element as any)[$model] = null;\n  }\n\n  get currentGLTF() {\n    return this._currentGLTF;\n  }\n\n  /**\n   * Updates the ModelScene for a new container size in CSS pixels.\n   */\n  setSize(width: number, height: number) {\n    if (this.width === width && this.height === height) {\n      return;\n    }\n    this.width = Math.max(width, 1);\n    this.height = Math.max(height, 1);\n    this.annotationRenderer.setSize(width, height);\n\n    this.aspect = this.width / this.height;\n\n    if (this.externalRenderer != null) {\n      const dpr = window.devicePixelRatio;\n      this.externalRenderer.resize(width * dpr, height * dpr);\n    }\n\n    this.queueRender();\n  }\n\n  markBakedShadow(mesh: Mesh) {\n    mesh.userData.noHit = true;\n    this.bakedShadows.add(mesh);\n  }\n\n  unmarkBakedShadow(mesh: Mesh) {\n    mesh.userData.noHit = false;\n    mesh.visible = true;\n    this.bakedShadows.delete(mesh);\n    this.boundingBox.expandByObject(mesh);\n  }\n\n  findBakedShadows(group: Object3D) {\n    const boundingBox = new Box3();\n\n    group.traverse((object: Object3D) => {\n      const mesh = object as Mesh;\n      if (!mesh.material) {\n        return;\n      }\n      const material = mesh.material as Material;\n      if (!material.transparent) {\n        return;\n      }\n      boundingBox.setFromObject(mesh);\n      const size = boundingBox.getSize(vector3);\n      const minDim = Math.min(size.x, size.y, size.z);\n      const maxDim = Math.max(size.x, size.y, size.z);\n      if (maxDim < MIN_SHADOW_RATIO * minDim) {\n        return;\n      }\n      this.markBakedShadow(mesh);\n    });\n  }\n\n  checkBakedShadows() {\n    const {min, max} = this.boundingBox;\n    const shadowBox = new Box3();\n    this.boundingBox.getSize(this.size);\n\n    for (const mesh of this.bakedShadows) {\n      shadowBox.setFromObject(mesh);\n      if (shadowBox.min.y < min.y + this.size.y / MIN_SHADOW_RATIO &&\n          shadowBox.min.x <= min.x && shadowBox.max.x >= max.x &&\n          shadowBox.min.z <= min.z && shadowBox.max.z >= max.z) {\n        // floor shadow\n        continue;\n      }\n      if (shadowBox.min.z < min.z + this.size.z / MIN_SHADOW_RATIO &&\n          shadowBox.min.x <= min.x && shadowBox.max.x >= max.x &&\n          shadowBox.min.y <= min.y && shadowBox.max.y >= max.y) {\n        // wall shadow\n        continue;\n      }\n      this.unmarkBakedShadow(mesh);\n    }\n  }\n\n  applyTransform() {\n    const {model} = this;\n    if (model == null) {\n      return;\n    }\n    const orientation = parseExpressions(this.element.orientation)[0]\n                            .terms as [NumberNode, NumberNode, NumberNode];\n\n    const roll = normalizeUnit(orientation[0]).number;\n    const pitch = normalizeUnit(orientation[1]).number;\n    const yaw = normalizeUnit(orientation[2]).number;\n\n    model.quaternion.setFromEuler(new Euler(pitch, yaw, roll, 'YXZ'));\n\n    const scale = parseExpressions(this.element.scale)[0]\n                      .terms as [NumberNode, NumberNode, NumberNode];\n\n    model.scale.set(scale[0].number, scale[1].number, scale[2].number);\n  }\n\n  updateBoundingBox() {\n    const {model} = this;\n    if (model == null) {\n      return;\n    }\n    this.target.remove(model);\n\n    this.findBakedShadows(model);\n\n    const bound = (box: Box3, vertex: Vector3): Box3 => {\n      return box.expandByPoint(vertex);\n    };\n    this.setBakedShadowVisibility(false);\n    this.boundingBox = reduceVertices(model, bound, new Box3());\n    // If there's nothing but the baked shadow, then it's not a baked shadow.\n    if (this.boundingBox.isEmpty()) {\n      this.setBakedShadowVisibility(true);\n      this.bakedShadows.forEach((mesh) => this.unmarkBakedShadow(mesh));\n      this.boundingBox = reduceVertices(model, bound, new Box3());\n    }\n    this.checkBakedShadows();\n    this.setBakedShadowVisibility();\n\n    this.boundingBox.getSize(this.size);\n\n    this.target.add(model);\n  }\n\n  /**\n   * Calculates the boundingSphere and idealAspect that allows the 3D\n   * object to be framed tightly in a 2D window of any aspect ratio without\n   * clipping at any camera orbit. The camera's center target point can be\n   * optionally specified. If no center is specified, it defaults to the center\n   * of the bounding box, which means asymmetric models will tend to be tight on\n   * one side instead of both. Proper choice of center can correct this.\n   */\n  async updateFraming() {\n    const {model} = this;\n    if (model == null) {\n      return;\n    }\n    this.target.remove(model);\n    this.setBakedShadowVisibility(false);\n    const {center} = this.boundingSphere;\n\n    this.element.requestUpdate('cameraTarget');\n    await this.element.updateComplete;\n    center.copy(this.getTarget());\n\n    const radiusSquared = (value: number, vertex: Vector3): number => {\n      return Math.max(value, center!.distanceToSquared(vertex));\n    };\n    this.boundingSphere.radius =\n        Math.sqrt(reduceVertices(model, radiusSquared, 0));\n\n    const horizontalTanFov = (value: number, vertex: Vector3): number => {\n      vertex.sub(center!);\n      const radiusXZ = Math.sqrt(vertex.x * vertex.x + vertex.z * vertex.z);\n      return Math.max(\n          value, radiusXZ / (this.idealCameraDistance() - Math.abs(vertex.y)));\n    };\n    this.idealAspect = reduceVertices(model, horizontalTanFov, 0) /\n        Math.tan((this.framedFoVDeg / 2) * Math.PI / 180);\n\n    this.setBakedShadowVisibility();\n    this.target.add(model);\n  }\n\n  setBakedShadowVisibility(visible: boolean = this.shadowIntensity <= 0) {\n    for (const shadow of this.bakedShadows) {\n      shadow.visible = visible;\n    }\n  }\n\n  idealCameraDistance(): number {\n    const halfFovRad = (this.framedFoVDeg / 2) * Math.PI / 180;\n    return this.boundingSphere.radius / Math.sin(halfFovRad);\n  }\n\n  /**\n   * Set's the framedFieldOfView based on the aspect ratio of the window in\n   * order to keep the model fully visible at any camera orientation.\n   */\n  adjustedFoV(fovDeg: number): number {\n    const vertical = Math.tan((fovDeg / 2) * Math.PI / 180) *\n        Math.max(1, this.idealAspect / this.aspect);\n    return 2 * Math.atan(vertical) * 180 / Math.PI;\n  }\n\n  getNDC(clientX: number, clientY: number): Vector2 {\n    if (this.xrCamera != null) {\n      ndc.set(clientX / window.screen.width, clientY / window.screen.height);\n    } else {\n      const rect = this.element.getBoundingClientRect();\n      ndc.set(\n          (clientX - rect.x) / this.width, (clientY - rect.y) / this.height);\n    }\n\n    ndc.multiplyScalar(2).subScalar(1);\n    ndc.y *= -1;\n    return ndc;\n  }\n\n  /**\n   * Returns the size of the corresponding canvas element.\n   */\n  getSize(): {width: number, height: number} {\n    return {width: this.width, height: this.height};\n  }\n\n  setEnvironmentAndSkybox(environment: Texture|null, skybox: Texture|null) {\n    if (this.element[$renderer].arRenderer.presentedScene === this) {\n      return;\n    }\n    this.environment = environment;\n    this.setBackground(skybox);\n    this.queueRender();\n  }\n\n  setBackground(skybox: Texture|null) {\n    this.groundedSkybox.map = skybox;\n    if (this.groundedSkybox.isUsable()) {\n      this.target.add(this.groundedSkybox);\n      this.background = null;\n    } else {\n      this.target.remove(this.groundedSkybox);\n      this.background = skybox;\n    }\n  }\n\n  farRadius() {\n    return this.boundingSphere.radius *\n        (this.groundedSkybox.parent != null ? GROUNDED_SKYBOX_SIZE : 1);\n  }\n\n  setGroundedSkybox() {\n    const heightNode =\n        parseExpressions(this.element.skyboxHeight)[0].terms[0] as NumberNode;\n    const height = normalizeUnit(heightNode).number;\n    const radius = GROUNDED_SKYBOX_SIZE * this.boundingSphere.radius;\n\n    this.groundedSkybox.updateGeometry(height, radius);\n    this.groundedSkybox.position.y =\n        height - (this.shadow ? 2 * this.shadow.gap() : 0);\n\n    this.setBackground(this.groundedSkybox.map);\n  }\n\n  /**\n   * Sets the point in model coordinates the model should orbit/pivot around.\n   */\n  setTarget(modelX: number, modelY: number, modelZ: number) {\n    this.goalTarget.set(-modelX, -modelY, -modelZ);\n  }\n\n  /**\n   * Set the decay time of, affects the speed of target transitions.\n   */\n  setTargetDamperDecayTime(decayMilliseconds: number) {\n    this.targetDamperX.setDecayTime(decayMilliseconds);\n    this.targetDamperY.setDecayTime(decayMilliseconds);\n    this.targetDamperZ.setDecayTime(decayMilliseconds);\n  }\n\n  /**\n   * Gets the point in model coordinates the model should orbit/pivot around.\n   */\n  getTarget(): Vector3 {\n    return this.goalTarget.clone().multiplyScalar(-1);\n  }\n\n  /**\n   * Gets the current target point, which may not equal the goal returned by\n   * getTarget() due to finite input decay smoothing.\n   */\n  getDynamicTarget(): Vector3 {\n    return this.target.position.clone().multiplyScalar(-1);\n  }\n\n  /**\n   * Shifts the model to the target point immediately instead of easing in.\n   */\n  jumpToGoal() {\n    this.updateTarget(SETTLING_TIME);\n  }\n\n  /**\n   * This should be called every frame with the frame delta to cause the target\n   * to transition to its set point.\n   */\n  updateTarget(delta: number): boolean {\n    const goal = this.goalTarget;\n    const target = this.target.position;\n    if (!goal.equals(target)) {\n      const normalization = this.boundingSphere.radius / 10;\n      let {x, y, z} = target;\n      x = this.targetDamperX.update(x, goal.x, delta, normalization);\n      y = this.targetDamperY.update(y, goal.y, delta, normalization);\n      z = this.targetDamperZ.update(z, goal.z, delta, normalization);\n      this.groundedSkybox.position.x = -x;\n      this.groundedSkybox.position.z = -z;\n      this.target.position.set(x, y, z);\n      this.target.updateMatrixWorld();\n      this.queueRender();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Yaw the +z (front) of the model toward the indicated world coordinates.\n   */\n  pointTowards(worldX: number, worldZ: number) {\n    const {x, z} = this.position;\n    this.yaw = Math.atan2(worldX - x, worldZ - z);\n  }\n\n  get model() {\n    return this._model;\n  }\n\n  /**\n   * Yaw is the scene's orientation about the y-axis, around the rotation\n   * center.\n   */\n  set yaw(radiansY: number) {\n    this.pivot.rotation.y = radiansY;\n    this.groundedSkybox.rotation.y = -radiansY;\n    this.queueRender();\n  }\n\n  get yaw(): number {\n    return this.pivot.rotation.y;\n  }\n\n  set animationTime(value: number) {\n    this.mixer.setTime(value);\n    this.queueShadowRender();\n  }\n\n  get animationTime(): number {\n    if (this.currentAnimationAction != null) {\n      const loopCount =\n          Math.max((this.currentAnimationAction as any)._loopCount, 0);\n      if (this.currentAnimationAction.loop === LoopPingPong &&\n          (loopCount & 1) === 1) {\n        return this.duration - this.currentAnimationAction.time\n      } else {\n        return this.currentAnimationAction.time;\n      }\n    }\n\n    return 0;\n  }\n\n  set animationTimeScale(value: number) {\n    this.mixer.timeScale = value;\n  }\n\n  get animationTimeScale(): number {\n    return this.mixer.timeScale;\n  }\n\n  get duration(): number {\n    if (this.currentAnimationAction != null &&\n        this.currentAnimationAction.getClip()) {\n      return this.currentAnimationAction.getClip().duration;\n    }\n\n    return 0;\n  }\n\n  get hasActiveAnimation(): boolean {\n    return this.currentAnimationAction != null;\n  }\n\n  /**\n   * Plays an animation if there are any associated with the current model.\n   * Accepts an optional string name of an animation to play. If no name is\n   * provided, or if no animation is found by the given name, always falls back\n   * to playing the first animation.\n   */\n  playAnimation(\n      name: string|null = null, crossfadeTime: number = 0,\n      loopMode: AnimationActionLoopStyles = LoopRepeat,\n      repetitionCount: number = Infinity) {\n    if (this._currentGLTF == null) {\n      return;\n    }\n    const {animations} = this;\n    if (animations == null || animations.length === 0) {\n      return;\n    }\n\n    let animationClip = null;\n\n    if (name != null) {\n      animationClip = this.animationsByName.get(name);\n\n      if (animationClip == null) {\n        const parsedAnimationIndex = parseInt(name);\n\n        if (!isNaN(parsedAnimationIndex) && parsedAnimationIndex >= 0 &&\n            parsedAnimationIndex < animations.length) {\n          animationClip = animations[parsedAnimationIndex];\n        }\n      }\n    }\n\n    if (animationClip == null) {\n      animationClip = animations[0];\n    }\n\n    try {\n      const {currentAnimationAction: lastAnimationAction} = this;\n\n      const action = this.mixer.clipAction(animationClip, this);\n      this.currentAnimationAction = action;\n\n      if (this.element.paused) {\n        this.mixer.stopAllAction();\n      } else {\n        action.paused = false;\n        if (lastAnimationAction != null && action !== lastAnimationAction) {\n          action.crossFadeFrom(lastAnimationAction, crossfadeTime, false);\n        } else if (\n            this.animationTimeScale > 0 &&\n            this.animationTime == this.duration) {\n          // This is a workaround for what I believe is a three.js bug.\n          this.animationTime = 0;\n        }\n      }\n\n      action.setLoop(loopMode, repetitionCount);\n\n      action.enabled = true;\n      action.clampWhenFinished = true;\n\n      action.play();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  stopAnimation() {\n    this.currentAnimationAction = null;\n    this.mixer.stopAllAction();\n  }\n\n  updateAnimation(step: number) {\n    this.mixer.update(step);\n    this.queueShadowRender();\n  }\n\n  subscribeMixerEvent(event: string, callback: (...args: any[]) => void) {\n    this.mixer.addEventListener(event, callback);\n  }\n\n  /**\n   * Call if the object has been changed in such a way that the shadow's shape\n   * has changed (not a rotation about the Y axis).\n   */\n  updateShadow() {\n    const shadow = this.shadow;\n    if (shadow != null) {\n      const side = this.element.arPlacement === 'wall' ? 'back' : 'bottom';\n      shadow.setScene(this, this.shadowSoftness, side);\n      shadow.needsUpdate = true;\n    }\n  }\n\n  renderShadow(renderer: WebGLRenderer) {\n    const shadow = this.shadow;\n    if (shadow != null && shadow.needsUpdate == true) {\n      shadow.render(renderer, this);\n      shadow.needsUpdate = false;\n    }\n  }\n\n  private queueShadowRender() {\n    if (this.shadow != null) {\n      this.shadow.needsUpdate = true;\n    }\n  }\n\n  /**\n   * Sets the shadow's intensity, lazily creating the shadow as necessary.\n   */\n  setShadowIntensity(shadowIntensity: number) {\n    this.shadowIntensity = shadowIntensity;\n    if (this._currentGLTF == null) {\n      return;\n    }\n    this.setBakedShadowVisibility();\n    if (shadowIntensity <= 0 && this.shadow == null) {\n      return;\n    }\n\n    if (this.shadow == null) {\n      const side = this.element.arPlacement === 'wall' ? 'back' : 'bottom';\n      this.shadow = new Shadow(this, this.shadowSoftness, side);\n    }\n    this.shadow.setIntensity(shadowIntensity);\n  }\n\n  /**\n   * Sets the shadow's softness by mapping a [0, 1] softness parameter to the\n   * shadow's resolution. This involves reallocation, so it should not be\n   * changed frequently. Softer shadows are cheaper to render.\n   */\n  setShadowSoftness(softness: number) {\n    this.shadowSoftness = softness;\n    const shadow = this.shadow;\n    if (shadow != null) {\n      shadow.setSoftness(softness);\n    }\n  }\n\n  /**\n   * Shift the floor vertically from the bottom of the model's bounding box by\n   * offset (should generally be negative).\n   */\n  setShadowOffset(offset: number) {\n    const shadow = this.shadow;\n    if (shadow != null) {\n      shadow.setOffset(offset);\n    }\n  }\n\n  getHit(object: Object3D = this) {\n    const hits = raycaster.intersectObject(object, true);\n    return hits.find((hit) => hit.object.visible && !hit.object.userData.noHit);\n  }\n\n  hitFromController(controller: XRTargetRaySpace, object: Object3D = this) {\n    raycaster.setFromXRController(controller);\n    return this.getHit(object);\n  }\n\n  hitFromPoint(ndcPosition: Vector2, object: Object3D = this) {\n    raycaster.setFromCamera(ndcPosition, this.getCamera());\n    return this.getHit(object);\n  }\n\n  /**\n   * This method returns the world position, model-space normal and texture\n   * coordinate of the point on the mesh corresponding to the input pixel\n   * coordinates given relative to the model-viewer element. If the mesh\n   * is not hit, the result is null.\n   */\n  positionAndNormalFromPoint(ndcPosition: Vector2, object: Object3D = this):\n      {position: Vector3, normal: Vector3, uv: Vector2|null}|null {\n    const hit = this.hitFromPoint(ndcPosition, object);\n    if (hit == null) {\n      return null;\n    }\n\n    const position = hit.point;\n    const normal = hit.face != null ?\n        hit.face.normal.clone().applyNormalMatrix(\n            new Matrix3().getNormalMatrix(hit.object.matrixWorld)) :\n        raycaster.ray.direction.clone().multiplyScalar(-1);\n    const uv = hit.uv ?? null;\n\n    return {position, normal, uv};\n  }\n\n  /**\n   * This method returns a dynamic hotspot ID string of the point on the mesh\n   * corresponding to the input pixel coordinates given relative to the\n   * model-viewer element. The ID string can be used in the data-surface\n   * attribute of the hotspot to make it follow this point on the surface even\n   * as the model animates. If the mesh is not hit, the result is null.\n   */\n  surfaceFromPoint(ndcPosition: Vector2, object: Object3D = this): string|null {\n    const model = this.element.model;\n    if (model == null) {\n      return null;\n    }\n\n    const hit = this.hitFromPoint(ndcPosition, object);\n    if (hit == null || hit.face == null) {\n      return null;\n    }\n\n    const node = model[$nodeFromPoint](hit);\n    const {meshes, primitives} = node.mesh.userData.associations;\n\n    const va = new Vector3();\n    const vb = new Vector3();\n    const vc = new Vector3();\n    const {a, b, c} = hit.face;\n    const mesh = hit.object as any;\n    mesh.getVertexPosition(a, va);\n    mesh.getVertexPosition(b, vb);\n    mesh.getVertexPosition(c, vc);\n    const tri = new Triangle(va, vb, vc);\n    const uvw = new Vector3();\n    tri.getBarycoord(mesh.worldToLocal(hit.point), uvw);\n\n    return `${meshes} ${primitives} ${a} ${b} ${c} ${uvw.x.toFixed(3)} ${\n        uvw.y.toFixed(3)} ${uvw.z.toFixed(3)}`;\n  }\n\n  /**\n   * The following methods are for operating on the set of Hotspot objects\n   * attached to the scene. These come from DOM elements, provided to slots by\n   * the Annotation Mixin.\n   */\n  addHotspot(hotspot: Hotspot) {\n    this.target.add(hotspot);\n    // This happens automatically in render(), but we do it early so that\n    // the slots appear in the shadow DOM and the elements get attached,\n    // allowing us to dispatch events on them.\n    this.annotationRenderer.domElement.appendChild(hotspot.element);\n    this.updateSurfaceHotspot(hotspot);\n  }\n\n  removeHotspot(hotspot: Hotspot) {\n    this.target.remove(hotspot);\n  }\n\n  /**\n   * Helper method to apply a function to all hotspots.\n   */\n  forHotspots(func: (hotspot: Hotspot) => void) {\n    const {children} = this.target;\n    for (let i = 0, l = children.length; i < l; i++) {\n      const hotspot = children[i];\n      if (hotspot instanceof Hotspot) {\n        func(hotspot);\n      }\n    }\n  }\n\n  /**\n   * Lazy initializer for surface hotspots - will only run once.\n   */\n  updateSurfaceHotspot(hotspot: Hotspot) {\n    if (hotspot.surface == null || this.element.model == null) {\n      return;\n    }\n    const nodes = parseExpressions(hotspot.surface)[0].terms as NumberNode[];\n    if (nodes.length != 8) {\n      console.warn(hotspot.surface + ' does not have exactly 8 numbers.');\n      return;\n    }\n    const primitiveNode =\n        this.element.model[$nodeFromIndex](nodes[0].number, nodes[1].number);\n    if (primitiveNode == null) {\n      console.warn(\n          hotspot.surface +\n          ' does not match a node/primitive in this glTF! Skipping this hotspot.');\n      return;\n    }\n\n    const numVert = primitiveNode.mesh.geometry.attributes.position.count;\n    const tri = new Vector3(nodes[2].number, nodes[3].number, nodes[4].number);\n    if (tri.x >= numVert || tri.y >= numVert || tri.z >= numVert) {\n      console.warn(\n          hotspot.surface +\n          ' vertex indices out of range in this glTF! Skipping this hotspot.');\n      return;\n    }\n\n    const bary = new Vector3(nodes[5].number, nodes[6].number, nodes[7].number);\n    hotspot.mesh = primitiveNode.mesh;\n    hotspot.tri = tri;\n    hotspot.bary = bary;\n\n    hotspot.updateSurface();\n  }\n\n  /**\n   * Update positions of surface hotspots to follow model animation.\n   */\n  animateSurfaceHotspots() {\n    if (this.element.paused) {\n      return;\n    }\n    this.forHotspots((hotspot) => {\n      hotspot.updateSurface();\n    });\n  }\n\n  /**\n   * Update the CSS visibility of the hotspots based on whether their normals\n   * point toward the camera.\n   */\n  updateHotspotsVisibility(viewerPosition: Vector3) {\n    this.forHotspots((hotspot) => {\n      view.copy(viewerPosition);\n      target.setFromMatrixPosition(hotspot.matrixWorld);\n      view.sub(target);\n      normalWorld.copy(hotspot.normal)\n          .transformDirection(this.target.matrixWorld);\n      if (view.dot(normalWorld) < 0) {\n        hotspot.hide();\n      } else {\n        hotspot.show();\n      }\n    });\n  }\n\n  /**\n   * Rotate all hotspots to an absolute orientation given by the input number of\n   * radians. Zero returns them to upright.\n   */\n  orientHotspots(radians: number) {\n    this.forHotspots((hotspot) => {\n      hotspot.orient(radians);\n    });\n  }\n\n  /**\n   * Set the rendering visibility of all hotspots. This is used to hide them\n   * during transitions and such.\n   */\n  setHotspotsVisibility(visible: boolean) {\n    this.forHotspots((hotspot) => {\n      hotspot.visible = visible;\n    });\n  }\n\n  updateSchema(src: string|null) {\n    const {schemaElement, element} = this;\n    const {alt, poster, iosSrc} = element;\n    if (src != null) {\n      const encoding = [{\n        '@type': 'MediaObject',\n        contentUrl: src,\n        encodingFormat: src.split('.').pop()?.toLowerCase() === 'gltf' ?\n            'model/gltf+json' :\n            'model/gltf-binary'\n      }];\n\n      if (iosSrc) {\n        encoding.push({\n          '@type': 'MediaObject',\n          contentUrl: iosSrc,\n          encodingFormat: 'model/vnd.usdz+zip'\n        });\n      }\n\n      const structuredData = {\n        '@context': 'http://schema.org/',\n        '@type': '3DModel',\n        image: poster ?? undefined,\n        name: alt ?? undefined,\n        encoding\n      };\n\n      schemaElement.textContent = JSON.stringify(structuredData);\n      document.head.appendChild(schemaElement);\n    } else if (schemaElement.parentElement != null) {\n      schemaElement.parentElement.removeChild(schemaElement);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}