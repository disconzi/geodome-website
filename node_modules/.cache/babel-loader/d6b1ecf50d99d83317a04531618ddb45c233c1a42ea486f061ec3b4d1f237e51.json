{"ast":null,"code":"import { $getLoadedMaterial, $variantIndices } from '../material.js';\nimport { $correlatedObjects } from '../three-dom-element.js';\n// Defines the base level node methods and data.\nexport class Node {\n  constructor(name) {\n    this.name = '';\n    this.children = new Array();\n    this.name = name;\n  }\n}\n// Represents a primitive in a glTF mesh.\nexport class PrimitiveNode extends Node {\n  constructor(mesh, mvMaterials, modelVariants, correlatedSceneGraph) {\n    super(mesh.name);\n    // Maps glTF material index number to a material that this primitive supports.\n    this.materials = new Map();\n    // Maps variant index to material.\n    this.variantToMaterialMap = new Map();\n    this.initialMaterialIdx = 0;\n    this.activeMaterialIdx = 0;\n    this.mesh = mesh;\n    const {\n      gltf,\n      threeGLTF,\n      threeObjectMap\n    } = correlatedSceneGraph;\n    this.parser = threeGLTF.parser;\n    this.modelVariants = modelVariants;\n    this.mesh.userData.variantData = modelVariants;\n    // Captures the primitive's initial material.\n    const materialMappings = threeObjectMap.get(mesh.material);\n    if (materialMappings.materials != null) {\n      this.initialMaterialIdx = this.activeMaterialIdx = materialMappings.materials;\n    } else {\n      console.error(`Primitive (${mesh.name}) missing initial material reference.`);\n    }\n    // Gets the mesh index from the node.\n    const associations = mesh.userData.associations || {};\n    if (associations.meshes == null) {\n      console.error('Mesh is missing primitive index association');\n      return;\n    }\n    // The gltf mesh array to sample from.\n    const meshElementArray = gltf['meshes'] || [];\n    // List of primitives under the mesh.\n    const gltfPrimitives = meshElementArray[associations.meshes].primitives || [];\n    const gltfPrimitive = gltfPrimitives[associations.primitives];\n    if (gltfPrimitive == null) {\n      console.error('Mesh primitive definition is missing.');\n      return;\n    }\n    // Maps the gltfPrimitive default to a material.\n    if (gltfPrimitive.material != null) {\n      this.materials.set(gltfPrimitive.material, mvMaterials[gltfPrimitive.material]);\n    } else {\n      const defaultIdx = mvMaterials.findIndex(mat => {\n        return mat.name === 'Default';\n      });\n      if (defaultIdx >= 0) {\n        this.materials.set(defaultIdx, mvMaterials[defaultIdx]);\n      } else {\n        console.warn('gltfPrimitive has no material!');\n      }\n    }\n    if (gltfPrimitive.extensions && gltfPrimitive.extensions['KHR_materials_variants']) {\n      const variantsExtension = gltfPrimitive.extensions['KHR_materials_variants'];\n      const extensions = threeGLTF.parser.json.extensions;\n      const variantNames = extensions['KHR_materials_variants'].variants;\n      // Provides definition now that we know there are variants to\n      // support.\n      for (const mapping of variantsExtension.mappings) {\n        const mvMaterial = mvMaterials[mapping.material];\n        // Maps variant indices to Materials.\n        this.materials.set(mapping.material, mvMaterial);\n        for (const variant of mapping.variants) {\n          const {\n            name\n          } = variantNames[variant];\n          this.variantToMaterialMap.set(variant, mvMaterial);\n          // Provides variant info for material self lookup.\n          mvMaterial[$variantIndices]().add(variant);\n          // Updates the models variant data.\n          if (!modelVariants.has(name)) {\n            modelVariants.set(name, {\n              name,\n              index: variant\n            });\n          }\n        }\n      }\n    }\n  }\n  async setActiveMaterial(material) {\n    const mvMaterial = this.materials.get(material);\n    if (mvMaterial != null && material !== this.activeMaterialIdx) {\n      this.mesh.material = await mvMaterial[$getLoadedMaterial]();\n      const {\n        normalScale\n      } = this.mesh.material;\n      // TODO: remove this hack in favor of properly storing the different\n      // three.js materials that are potentially created for different meshes\n      // that share a glTF material.\n      if (normalScale != null && normalScale.y * normalScale.x < 0 != (this.mesh.geometry.attributes.tangent == null)) {\n        this.parser.assignFinalMaterial(this.mesh);\n      }\n      this.activeMaterialIdx = material;\n    }\n    return this.mesh.material;\n  }\n  getActiveMaterial() {\n    return this.materials.get(this.activeMaterialIdx);\n  }\n  getMaterial(index) {\n    return this.materials.get(index);\n  }\n  async enableVariant(name) {\n    if (name == null) {\n      return this.setActiveMaterial(this.initialMaterialIdx);\n    }\n    if (this.variantToMaterialMap != null && this.modelVariants.has(name)) {\n      const modelVariants = this.modelVariants.get(name);\n      return this.enableVariantHelper(modelVariants.index);\n    }\n    return null;\n  }\n  async enableVariantHelper(index) {\n    if (this.variantToMaterialMap != null && index != null) {\n      const material = this.variantToMaterialMap.get(index);\n      if (material != null) {\n        return this.setActiveMaterial(material.index);\n      }\n    }\n    return null;\n  }\n  async instantiateVariants() {\n    if (this.variantToMaterialMap == null) {\n      return;\n    }\n    for (const index of this.variantToMaterialMap.keys()) {\n      const variantMaterial = this.mesh.userData.variantMaterials.get(index);\n      if (variantMaterial.material != null) {\n        continue;\n      }\n      const threeMaterial = await this.enableVariantHelper(index);\n      if (threeMaterial != null) {\n        variantMaterial.material = threeMaterial;\n      }\n    }\n  }\n  get variantInfo() {\n    return this.variantToMaterialMap;\n  }\n  addVariant(materialVariant, variantName) {\n    if (!this.ensureVariantIsUnused(variantName)) {\n      return false;\n    }\n    // Adds the variant to the model variants if needed.\n    if (!this.modelVariants.has(variantName)) {\n      this.modelVariants.set(variantName, {\n        name: variantName,\n        index: this.modelVariants.size\n      });\n    }\n    const modelVariantData = this.modelVariants.get(variantName);\n    const variantIndex = modelVariantData.index;\n    // Updates materials mapped to the variant.\n    materialVariant[$variantIndices]().add(variantIndex);\n    // Updates internal mappings.\n    this.variantToMaterialMap.set(variantIndex, materialVariant);\n    this.materials.set(materialVariant.index, materialVariant);\n    this.updateVariantUserData(variantIndex, materialVariant);\n    return true;\n  }\n  deleteVariant(variantIndex) {\n    if (this.variantInfo.has(variantIndex)) {\n      this.variantInfo.delete(variantIndex);\n      const userDataMap = this.mesh.userData.variantMaterials;\n      if (userDataMap != null) {\n        userDataMap.delete(variantIndex);\n      }\n    }\n  }\n  updateVariantUserData(variantIndex, materialVariant) {\n    // Adds variants name to material variants set.\n    materialVariant[$variantIndices]().add(variantIndex);\n    this.mesh.userData.variantData = this.modelVariants;\n    // Updates import data (see VariantMaterialLoaderPlugin.ts).\n    this.mesh.userData.variantMaterials = this.mesh.userData.variantMaterials || new Map();\n    const map = this.mesh.userData.variantMaterials;\n    map.set(variantIndex, {\n      material: materialVariant[$correlatedObjects].values().next().value,\n      gltfMaterialIndex: materialVariant.index\n    });\n  }\n  ensureVariantIsUnused(variantName) {\n    const modelVariants = this.modelVariants.get(variantName);\n    if (modelVariants != null && this.variantInfo.has(modelVariants.index)) {\n      console.warn(`Primitive cannot add variant '${variantName}' for this material, it already exists.`);\n      return false;\n    }\n    return true;\n  }\n}","map":{"version":3,"names":["$getLoadedMaterial","$variantIndices","$correlatedObjects","Node","constructor","name","children","Array","PrimitiveNode","mesh","mvMaterials","modelVariants","correlatedSceneGraph","materials","Map","variantToMaterialMap","initialMaterialIdx","activeMaterialIdx","gltf","threeGLTF","threeObjectMap","parser","userData","variantData","materialMappings","get","material","console","error","associations","meshes","meshElementArray","gltfPrimitives","primitives","gltfPrimitive","set","defaultIdx","findIndex","mat","warn","extensions","variantsExtension","json","variantNames","variants","mapping","mappings","mvMaterial","variant","add","has","index","setActiveMaterial","normalScale","y","x","geometry","attributes","tangent","assignFinalMaterial","getActiveMaterial","getMaterial","enableVariant","enableVariantHelper","instantiateVariants","keys","variantMaterial","variantMaterials","threeMaterial","variantInfo","addVariant","materialVariant","variantName","ensureVariantIsUnused","size","modelVariantData","variantIndex","updateVariantUserData","deleteVariant","delete","userDataMap","map","values","next","value","gltfMaterialIndex"],"sources":["/Users/leandrodisconzi/CascadeProjects/geodome-website/node_modules/@google/model-viewer/lib/features/scene-graph/nodes/primitive-node.js"],"sourcesContent":["import { $getLoadedMaterial, $variantIndices } from '../material.js';\nimport { $correlatedObjects } from '../three-dom-element.js';\n// Defines the base level node methods and data.\nexport class Node {\n    constructor(name) {\n        this.name = '';\n        this.children = new Array();\n        this.name = name;\n    }\n}\n// Represents a primitive in a glTF mesh.\nexport class PrimitiveNode extends Node {\n    constructor(mesh, mvMaterials, modelVariants, correlatedSceneGraph) {\n        super(mesh.name);\n        // Maps glTF material index number to a material that this primitive supports.\n        this.materials = new Map();\n        // Maps variant index to material.\n        this.variantToMaterialMap = new Map();\n        this.initialMaterialIdx = 0;\n        this.activeMaterialIdx = 0;\n        this.mesh = mesh;\n        const { gltf, threeGLTF, threeObjectMap } = correlatedSceneGraph;\n        this.parser = threeGLTF.parser;\n        this.modelVariants = modelVariants;\n        this.mesh.userData.variantData = modelVariants;\n        // Captures the primitive's initial material.\n        const materialMappings = threeObjectMap.get(mesh.material);\n        if (materialMappings.materials != null) {\n            this.initialMaterialIdx = this.activeMaterialIdx =\n                materialMappings.materials;\n        }\n        else {\n            console.error(`Primitive (${mesh.name}) missing initial material reference.`);\n        }\n        // Gets the mesh index from the node.\n        const associations = mesh.userData.associations ||\n            {};\n        if (associations.meshes == null) {\n            console.error('Mesh is missing primitive index association');\n            return;\n        }\n        // The gltf mesh array to sample from.\n        const meshElementArray = gltf['meshes'] || [];\n        // List of primitives under the mesh.\n        const gltfPrimitives = (meshElementArray[associations.meshes].primitives || []);\n        const gltfPrimitive = gltfPrimitives[associations.primitives];\n        if (gltfPrimitive == null) {\n            console.error('Mesh primitive definition is missing.');\n            return;\n        }\n        // Maps the gltfPrimitive default to a material.\n        if (gltfPrimitive.material != null) {\n            this.materials.set(gltfPrimitive.material, mvMaterials[gltfPrimitive.material]);\n        }\n        else {\n            const defaultIdx = mvMaterials.findIndex((mat) => {\n                return mat.name === 'Default';\n            });\n            if (defaultIdx >= 0) {\n                this.materials.set(defaultIdx, mvMaterials[defaultIdx]);\n            }\n            else {\n                console.warn('gltfPrimitive has no material!');\n            }\n        }\n        if (gltfPrimitive.extensions &&\n            gltfPrimitive.extensions['KHR_materials_variants']) {\n            const variantsExtension = gltfPrimitive.extensions['KHR_materials_variants'];\n            const extensions = threeGLTF.parser.json.extensions;\n            const variantNames = extensions['KHR_materials_variants'].variants;\n            // Provides definition now that we know there are variants to\n            // support.\n            for (const mapping of variantsExtension.mappings) {\n                const mvMaterial = mvMaterials[mapping.material];\n                // Maps variant indices to Materials.\n                this.materials.set(mapping.material, mvMaterial);\n                for (const variant of mapping.variants) {\n                    const { name } = variantNames[variant];\n                    this.variantToMaterialMap.set(variant, mvMaterial);\n                    // Provides variant info for material self lookup.\n                    mvMaterial[$variantIndices]().add(variant);\n                    // Updates the models variant data.\n                    if (!modelVariants.has(name)) {\n                        modelVariants.set(name, { name, index: variant });\n                    }\n                }\n            }\n        }\n    }\n    async setActiveMaterial(material) {\n        const mvMaterial = this.materials.get(material);\n        if (mvMaterial != null && material !== this.activeMaterialIdx) {\n            this.mesh.material = await mvMaterial[$getLoadedMaterial]();\n            const { normalScale } = this.mesh.material;\n            // TODO: remove this hack in favor of properly storing the different\n            // three.js materials that are potentially created for different meshes\n            // that share a glTF material.\n            if (normalScale != null &&\n                (normalScale.y * normalScale.x < 0) !=\n                    (this.mesh.geometry.attributes.tangent == null)) {\n                this.parser.assignFinalMaterial(this.mesh);\n            }\n            this.activeMaterialIdx = material;\n        }\n        return this.mesh.material;\n    }\n    getActiveMaterial() {\n        return this.materials.get(this.activeMaterialIdx);\n    }\n    getMaterial(index) {\n        return this.materials.get(index);\n    }\n    async enableVariant(name) {\n        if (name == null) {\n            return this.setActiveMaterial(this.initialMaterialIdx);\n        }\n        if (this.variantToMaterialMap != null && this.modelVariants.has(name)) {\n            const modelVariants = this.modelVariants.get(name);\n            return this.enableVariantHelper(modelVariants.index);\n        }\n        return null;\n    }\n    async enableVariantHelper(index) {\n        if (this.variantToMaterialMap != null && index != null) {\n            const material = this.variantToMaterialMap.get(index);\n            if (material != null) {\n                return this.setActiveMaterial(material.index);\n            }\n        }\n        return null;\n    }\n    async instantiateVariants() {\n        if (this.variantToMaterialMap == null) {\n            return;\n        }\n        for (const index of this.variantToMaterialMap.keys()) {\n            const variantMaterial = this.mesh.userData.variantMaterials.get(index);\n            if (variantMaterial.material != null) {\n                continue;\n            }\n            const threeMaterial = await this.enableVariantHelper(index);\n            if (threeMaterial != null) {\n                variantMaterial.material = threeMaterial;\n            }\n        }\n    }\n    get variantInfo() {\n        return this.variantToMaterialMap;\n    }\n    addVariant(materialVariant, variantName) {\n        if (!this.ensureVariantIsUnused(variantName)) {\n            return false;\n        }\n        // Adds the variant to the model variants if needed.\n        if (!this.modelVariants.has(variantName)) {\n            this.modelVariants.set(variantName, { name: variantName, index: this.modelVariants.size });\n        }\n        const modelVariantData = this.modelVariants.get(variantName);\n        const variantIndex = modelVariantData.index;\n        // Updates materials mapped to the variant.\n        materialVariant[$variantIndices]().add(variantIndex);\n        // Updates internal mappings.\n        this.variantToMaterialMap.set(variantIndex, materialVariant);\n        this.materials.set(materialVariant.index, materialVariant);\n        this.updateVariantUserData(variantIndex, materialVariant);\n        return true;\n    }\n    deleteVariant(variantIndex) {\n        if (this.variantInfo.has(variantIndex)) {\n            this.variantInfo.delete(variantIndex);\n            const userDataMap = this.mesh.userData.variantMaterials;\n            if (userDataMap != null) {\n                userDataMap.delete(variantIndex);\n            }\n        }\n    }\n    updateVariantUserData(variantIndex, materialVariant) {\n        // Adds variants name to material variants set.\n        materialVariant[$variantIndices]().add(variantIndex);\n        this.mesh.userData.variantData = this.modelVariants;\n        // Updates import data (see VariantMaterialLoaderPlugin.ts).\n        this.mesh.userData.variantMaterials = this.mesh.userData.variantMaterials ||\n            new Map();\n        const map = this.mesh.userData.variantMaterials;\n        map.set(variantIndex, {\n            material: materialVariant[$correlatedObjects].values().next().value,\n            gltfMaterialIndex: materialVariant.index,\n        });\n    }\n    ensureVariantIsUnused(variantName) {\n        const modelVariants = this.modelVariants.get(variantName);\n        if (modelVariants != null && this.variantInfo.has(modelVariants.index)) {\n            console.warn(`Primitive cannot add variant '${variantName}' for this material, it already exists.`);\n            return false;\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=primitive-node.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}